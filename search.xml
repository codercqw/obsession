<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>字符串的方法的总结和使用</title>
    <url>/2029/02/12/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%96%B9%E6%B3%95%E7%9A%84%E6%80%BB%E7%BB%93%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前些天写了篇数组的总结，其实我们再来看看字符串，和数组有异曲同工之妙，字符串也可以通过 <code>split</code> 来变成数组，然后使用数组的方法。</p>
<p>另外，对于字符串，其实我们关心的只有一个问题，<strong>返回值是什么</strong>。</p>
<p>接下来，我会带大家一步步的使用 <code>String</code> 里面所拥有的方法和属性</p>
<h1 id="字符串的属性"><a href="#字符串的属性" class="headerlink" title="字符串的属性"></a>字符串的属性</h1><h2 id="length"><a href="#length" class="headerlink" title="length"></a>length</h2><p>length属性表示一个字符串的长度。该属性返回字符串中字符编码单元的数量。JavaScript 使用 UTF-16 编码，该编码使用一个 16 比特的编码单元来表示大部分常见的字符，使用两个代码单元表示不常用的字符。因此 length 返回值可能与字符串中实际的字符数量不相同。</p>
<p><strong>空字符串的 length 为 0。</strong></p>
<p><strong>静态属性 String.length 返回 1。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"gating"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.length) <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> empty = <span class="string">""</span></span><br><span class="line"><span class="built_in">console</span>.log(empty.length) <span class="comment">// 0  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// JavaScript 内部，字符以 UTF-16 的格式储存，每个字符固定为2个字节。</span></span><br><span class="line"><span class="comment">// 对于那些需要4个字节储存的字符（Unicode 码点大于0xFFFF的字符），JavaScript 会认为它们是两个字符。</span></span><br><span class="line"><span class="keyword">let</span> double = <span class="string">"𪚥"</span></span><br><span class="line"><span class="built_in">console</span>.log(double.length) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从数组的length我们可得知，数组的 length 来截断数组，字符串的可不可以呢？</span></span><br><span class="line"><span class="comment">// 很遗憾的说，不行，因为字符串的length只可读，不可写</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">"gating"</span></span><br><span class="line">name.length = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(name,name.length) <span class="comment">// gating,6</span></span><br></pre></td></tr></table></figure>

<h1 id="字符串的静态方法"><a href="#字符串的静态方法" class="headerlink" title="字符串的静态方法"></a>字符串的静态方法</h1><h2 id="字符的-Unicode-表示法"><a href="#字符的-Unicode-表示法" class="headerlink" title="字符的 Unicode 表示法"></a>字符的 Unicode 表示法</h2><p>说到字符串，不得不说 JavaScript 中的字符串的 <code>Unicode</code> 表示形式，JavaScript 允许采用<code>\uxxxx</code>形式表示一个字符，其中<code>xxxx</code>表示字符的<code>Unicode</code>码点。</p>
<p>但是，这种表示法只限于码点在\u0000~\uFFFF之间的字符。超出这个范围的字符，必须用两个双字节的形式表示。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 比如</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"\u0061"</span>) <span class="comment">// a</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"\uD842\uDFB7"</span>) <span class="comment">// 𠮷</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"\u20BB7"</span>) <span class="comment">// "₻7"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是 es6 对这一点做出了改进，只要将码点放入大括号，就能正确解读该字符。</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"\u&#123;20BB7&#125;"</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考链接 <a href="http://es6.ruanyifeng.com/#docs/string" target="_blank" rel="noopener">ECMAScript 6 入门</a> 建议去了解一下，这里我就不做过多解释了，因为我用的真的不多（主要也是不会）</p>
</blockquote>
<h2 id="String-fromCharCode"><a href="#String-fromCharCode" class="headerlink" title="String.fromCharCode()"></a>String.fromCharCode()</h2><p>String.fromCharCode() 方法返回使用指定的Unicode值序列创建的字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * String.fromCharCode(numN)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number/String&#125;</span> </span>numN =&gt; 一组序列数字，表示 Unicode 值。</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>该方法返回一个字符串，而不是一个 String 对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(<span class="number">65</span>)) <span class="comment">// A</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(<span class="number">65</span>,<span class="number">66</span>)) <span class="comment">// AB</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(<span class="string">"----"</span>)) <span class="comment">// " "</span></span><br></pre></td></tr></table></figure>

<h3 id="作用于高位编码（higher-values）"><a href="#作用于高位编码（higher-values）" class="headerlink" title="作用于高位编码（higher values）"></a>作用于高位编码（higher values）</h3><p>尽管绝大部分常用的 Unicode 值可以用一个 16-bit 数字表示（正如 JavaScript 标准化过程早期），并且对于绝大部分值 fromCharCode() 返回一个字符（即对于绝大部分字符 UCS-2 值是 UTF-16 的子集），但是为了处理所有的 Unicode 值（至 21 bits），只用 fromCharCode() 是不足的。由于高位编码字符是用两个低位编码（lower value）表示形成的一个字符，因此String.fromCodePoint() （ES6 规范的一部分）被用来返回这样一对低位编码，从而可以完全表示这些高位编码字符。</p>
<h2 id="String-fromCodePoint"><a href="#String-fromCodePoint" class="headerlink" title="String.fromCodePoint()"></a>String.fromCodePoint()</h2><p>String.fromCodePoint() 静态方法返回使用指定的代码点序列创建的字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * String.fromCodePoint(numN)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number/String&#125;</span> </span>numN =&gt; 一串 Unicode 编码。如果传入无效的 Unicode 编码，将会抛出一个RangeError</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>该方法返回一个字符串，而不是一个 String 对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCodePoint(<span class="number">65</span>)) <span class="comment">// A</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCodePoint(<span class="number">65</span>,<span class="number">66</span>)) <span class="comment">// AB</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCodePoint(<span class="string">"----"</span>)) <span class="comment">// RangeError</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// String.fromCharCode() 方法不能单独获取在高代码点位上的字符</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(<span class="number">0x2F804</span>)) <span class="comment">// </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCodePoint(<span class="number">0x2F804</span>)) <span class="comment">// 你</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>具体实际用理可以看看 MDN 这里不做阐述了，因为博主这两个方法用着不多 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode" target="_blank" rel="noopener">String.fromCharCode()</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint" target="_blank" rel="noopener">String.fromCodePoint()</a></p>
</blockquote>
<h2 id="String-raw-和-模板字符串"><a href="#String-raw-和-模板字符串" class="headerlink" title="String.raw 和 模板字符串"></a>String.raw 和 模板字符串</h2><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>了解<code>String.raw</code>时，我们必须先了解一下什么是模板字符串，简单来说模板字符串是增强版的字符串，他用反引号（`）标识。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串中嵌入变量</span></span><br><span class="line"><span class="comment">// es6 之前，我们如果想要在字符串嵌入变量需要通过+号</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">"gating"</span>, time = <span class="string">"today"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Hello "</span>+name+<span class="string">", how are you "</span> + time) <span class="comment">// Hello gating, how are you today?</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板字符串后</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">"gating"</span>, time = <span class="string">"today"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Hello <span class="subst">$&#123;name&#125;</span>, how are you <span class="subst">$&#123;time&#125;</span>?`</span>) <span class="comment">// Hello gating, how are you today?</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 另外模板字符串可以表示多行字符串</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">             &lt;li&gt;first&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li&gt;second&lt;/li&gt;</span></span><br><span class="line"><span class="string">          &lt;/ul&gt;`</span></span><br></pre></td></tr></table></figure>


<h3 id="String-raw"><a href="#String-raw" class="headerlink" title="String.raw"></a>String.raw</h3><p>String.raw() 是一个模板字符串的标签函数，它的作用类似于 Python 中的字符串前缀 r 和 C# 中的字符串前缀 @，是用来获取一个模板字符串的原始字面量值的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * String.raw(callSite, ...substitutions) || String.raw`templateString`</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>callSite =&gt; 一个模板字符串的“调用点对象”。类似&#123; raw: ['foo', 'bar', 'baz'] &#125;。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Any&#125;</span> </span>...substitutions =&gt; 任意个可选的参数，表示任意个内插表达式对应的值。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>templateString =&gt; 模板字符串。</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>给定模板字符串的原始字面量值。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// "Hi\\u000A!"，这里得到的会是 \、u、0、0、0、A 6个字符</span></span><br><span class="line"><span class="comment">// 任何类型的转义形式都会失效</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.raw <span class="string">`Hi\u000A!`</span>) <span class="comment">// Hi\u000A!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">"Bob"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.raw <span class="string">`Hi\n<span class="subst">$&#123;name&#125;</span>!`</span>) <span class="comment">// Hi\nBob!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我认为你通常不需要把它当成普通函数来调用</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.raw(&#123; <span class="attr">raw</span>: <span class="string">'test'</span> &#125;, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)) <span class="comment">// t0e1s2t</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.raw(&#123; <span class="attr">raw</span>: [<span class="string">'t'</span>,<span class="string">'e'</span>,<span class="string">'s'</span>,<span class="string">'t'</span>] &#125;, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)) <span class="comment">// t0e1s2t</span></span><br></pre></td></tr></table></figure>

<p>作为函数，String.raw的代码实现基本如下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>.raw = <span class="function"><span class="keyword">function</span> (<span class="params">strings, ...values</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> output = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">let</span> index;</span><br><span class="line">  <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; values.length; index++) &#123;</span><br><span class="line">    output += strings.raw[index] + values[index];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  output += strings.raw[index]</span><br><span class="line">  <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="http://es6.ruanyifeng.com/#docs/string#String-raw" target="_blank" rel="noopener">ES6入门 String.raw()</a></p>
</blockquote>
<h1 id="正则相关"><a href="#正则相关" class="headerlink" title="正则相关"></a>正则相关</h1><blockquote>
<p>正则推荐观看文末的 正则表达式30分钟入门教程 ，写的非常好</p>
</blockquote>
<h2 id="split"><a href="#split" class="headerlink" title="split"></a>split</h2><p>split() 方法使用指定的分隔符字符串将一个String对象分割成字符串数组，以将字符串分隔为子字符串，以确定每个拆分的位置。 </p>
<blockquote>
<p>Tip: 如果空字符串(“”)被用作分隔符，则字符串会在每个字符之间分割。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * str.split(separator,limit)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>separator =&gt; 一个介于0 和字符串长度减1之间的整数。 (0~length-1) 如果没有提供索引，charAt() 将使用 0。如果指定的 index 值超出了该范围，则返回一个空字符串。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>limit =&gt; 一个整数，限定返回的分割片段数量。当提供此参数时，split 方法会在指定分隔符的每次出现时分割该字符串，但在限制条目已放入数组时停止。如果在达到指定限制之前达到字符串的末尾，它可能仍然包含少于限制的条目。新数组中不返回剩下的文本。</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> </span>返回源字符串以分隔符出现位置分隔而成的一个 Array </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"gating"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">''</span>)) <span class="comment">// ["g", "a", "t", "i", "n", "g"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">''</span>,<span class="number">1</span>)) <span class="comment">// ["g"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">''</span>,<span class="number">8</span>)) <span class="comment">// ["g", "a", "t", "i", "n", "g"]</span></span><br></pre></td></tr></table></figure>

<p>看到这里，是不是感觉可以用通过<code>split</code>转成数组，使用数组的方法啦？没错是的，还记得前些天我写过一篇数组的方法的总结吗？没错，重新看一遍就可以了O(∩_∩)O</p>
<p>不信，你看，我们可以通过 <code>split</code> 获取字符串的交集或差集哦</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回两个字符串的交集</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>str =&gt; 字符串1 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>str =&gt; 字符串2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">intersection</span>(<span class="params">str1, str2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str1.split(<span class="string">""</span>).filter(<span class="function"><span class="params">v</span> =&gt;</span> str2.split(<span class="string">""</span>).includes(v)).toString().replace(<span class="regexp">/,/g</span>, <span class="string">""</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(intersection(<span class="string">"abc"</span>,<span class="string">"bcd"</span>)) <span class="comment">// bc</span></span><br></pre></td></tr></table></figure>

<p>是不是感觉自己已经对字符串了如指掌了吗？</p>
<blockquote>
<p>好了，本次教程到此结束了</p>
</blockquote>
<p>开个玩笑嘛，接下来我会陆陆续续带大家认识下 <code>string</code> 的方法的。</p>
<h2 id="match"><a href="#match" class="headerlink" title="match"></a>match</h2><p>当一个字符串与一个正则表达式匹配时， match()方法检索匹配项</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * str.match(regexp)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;RegExp&#125;</span> </span>regexp =&gt; 个正则表达式对象。如果传入一个非正则表达式对象，则会隐式地使用 new RegExp(obj) 将其转换为一个 RegExp 。如果你未提供任何参数，直接使用 match() ，那么你会得到一个包含空字符串的 Array ：[""] 。</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span>  </span>如果字符串匹配到了表达式，会返回一个数组，数组的第一项是进行匹配完整的字符串，之后的项是用圆括号捕获的结果。如果没有匹配到，返回null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"gating"</span></span><br><span class="line"><span class="keyword">const</span> res = str.match(<span class="regexp">/g/g</span>)</span><br><span class="line"><span class="built_in">console</span>.log(res) <span class="comment">// ["g", "g"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match()) <span class="comment">// [""]</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/sadasd/</span>)) <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str1 = <span class="string">"NaN means not a number. Infinity contains -Infinity and +Infinity in JavaScript."</span>,</span><br><span class="line">    str2 = <span class="string">"My grandfather is 65 years old and My grandmother is 63 years old."</span>,</span><br><span class="line">    str3 = <span class="string">"The contract was declared null and void."</span>;</span><br><span class="line">str1.match(<span class="string">"number"</span>);   <span class="comment">// "number" 是字符串。返回["number"]</span></span><br><span class="line">str1.match(<span class="literal">NaN</span>);        <span class="comment">// NaN的类型是number。返回["NaN"]</span></span><br><span class="line">str1.match(<span class="literal">Infinity</span>);   <span class="comment">// Infinity的类型是number。返回["Infinity"]</span></span><br><span class="line">str1.match(+<span class="literal">Infinity</span>);  <span class="comment">// 返回["Infinity"]</span></span><br><span class="line">str1.match(-<span class="literal">Infinity</span>);  <span class="comment">// 返回["-Infinity"]</span></span><br><span class="line">str2.match(<span class="number">65</span>);         <span class="comment">// 返回["65"]</span></span><br><span class="line">str2.match(+<span class="number">65</span>);        <span class="comment">// 有正号的number。返回["65"]</span></span><br><span class="line">str3.match(<span class="literal">null</span>);       <span class="comment">// 返回["null"]</span></span><br></pre></td></tr></table></figure>

<h2 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h2><p>replace() 方法返回一个由替换值替换一些或所有匹配的模式后的新字符串。模式可以是一个字符串或者一个正则表达式, 替换值可以是一个字符串或者一个每次匹配都要调用的函数。</p>
<blockquote>
<p>replace 十分重要，必须掌握</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * str.replace(regexp|substr, newSubStr|function)</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@param <span class="type">&#123;RegExp&#125;</span> </span>regexp =&gt; 一个RegExp 对象或者其字面量。该正则所匹配的内容会被第二个参数的返回值替换掉。</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>substr =&gt; 一个要被 newSubStr 替换的字符串。其被视为一整个字符串，而不是一个正则表达式。仅仅是第一个匹配会被替换。</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>newSubStr =&gt;  用于替换掉第一个参数在原字符串中的匹配部分的字符串。该字符串中可以内插一些特殊的变量名 </span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@param <span class="type">&#123;Function&#125;</span> </span>function =&gt; 一个用来创建新子字符串的函数，该函数的返回值将替换掉第一个参数匹配到的结果 </span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span>  </span>一个部分或全部匹配由替代模式所取代的新的字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 特殊的变量名 和 function 在实例中 会更详细说明</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"gating"</span></span><br><span class="line"><span class="comment">// 如果用 substr ，只会替换找到的第一个字符，替换多个字符则需要用正则</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="string">'g'</span>,<span class="string">'家庭'</span>)) <span class="comment">// 家庭ating</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/g/</span>,<span class="string">'家庭'</span>)) <span class="comment">// 家庭ating</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/g/g</span>,<span class="string">'家庭'</span>)) <span class="comment">// 家庭atin家庭</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/g/i</span>,<span class="string">'G'</span>)) <span class="comment">// Gating</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> word = <span class="string">"hello,gating"</span></span><br><span class="line"><span class="comment">// 单词首字母大写</span></span><br><span class="line"><span class="comment">// 这里的 word 参数时匹配的字符串，下文有说明</span></span><br><span class="line"><span class="keyword">let</span> res = word.replace(<span class="regexp">/\b\w+\b/g</span>,(word)=&gt;(word[<span class="number">0</span>].toUpperCase()+word.slice(<span class="number">1</span>)))</span><br><span class="line"><span class="built_in">console</span>.log(res) <span class="comment">// Hello,Gating</span></span><br></pre></td></tr></table></figure>


<p>实际应用场景中，<code>replace</code> 方法非常灵活，可以做很多我们想要的事，比如：😄</p>
<p>类似于我们的模板引擎 replace 就可以实现，不过这里我就不带着大家实现了= =</p>
<p>在写实例时，我希望可以先搞懂几个概念和用法</p>
<h3 id="newSubStr-的特殊变量名"><a href="#newSubStr-的特殊变量名" class="headerlink" title="newSubStr 的特殊变量名"></a>newSubStr 的特殊变量名</h3><table>
<thead>
<tr>
<th>变量名</th>
<th>代表的值</th>
</tr>
</thead>
<tbody><tr>
<td><code>$$</code></td>
<td>插入一个 “$”。</td>
</tr>
<tr>
<td><code>$&amp;</code></td>
<td>插入匹配的子串。</td>
</tr>
<tr>
<td><code>$`</code></td>
<td>插入当前匹配的子串左边的内容。</td>
</tr>
<tr>
<td><code>$&#39;</code></td>
<td>插入当前匹配的子串右边的内容。</td>
</tr>
<tr>
<td><code>$*n*</code></td>
<td>假如第一个参数是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/RegExp" target="_blank" rel="noopener"><code>RegExp</code></a>对象，并且 n 是个小于100的非负整数，那么插入第 n 个括号匹配的字符串。提示：索引是从1开始</td>
</tr>
</tbody></table>
<h3 id="replace-中-function-的参数"><a href="#replace-中-function-的参数" class="headerlink" title="replace 中 function 的参数"></a>replace 中 function 的参数</h3><table>
<thead>
<tr>
<th>变量名</th>
<th>代表的值</th>
</tr>
</thead>
<tbody><tr>
<td>match</td>
<td>匹配的子串。（对应于上述的$&amp;。）</td>
</tr>
<tr>
<td><code>p1,p2, ...</code></td>
<td>假如replace()方法的第一个参数是一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/RegExp" target="_blank" rel="noopener"><code>RegExp</code></a> 对象，则代表第n个括号匹配的字符串。（对应于上述的$1，$2等。）例如, 如果是用 <code>/(\a+)(\b+)/</code>这个来匹配， <code>p1</code>就是匹配的 <code>\a+</code>,  <code>p2 就是匹配的</code> <code>\b+。</code></td>
</tr>
<tr>
<td><code>offset</code></td>
<td>匹配到的子字符串在原字符串中的偏移量。（比如，如果原字符串是“abcd”，匹配到的子字符串是“bc”，那么这个参数将是1）</td>
</tr>
<tr>
<td>string</td>
<td>被匹配的原字符串。</td>
</tr>
</tbody></table>
<blockquote>
<p>你可以指定一个函数作为第二个参数。在这种情况下，当匹配执行后， 该函数就会执行。 函数的返回值作为替换字符串。 (注意:  上面提到的特殊替换参数在这里不能被使用。) 另外要注意的是， 如果第一个参数是正则表达式， 并且其为全局匹配模式， 那么这个方法将被多次调用， 每次匹配都会被调用。</p>
</blockquote>
<p>在实际应用中,<code>replace</code>的使用可以满足大部分的操作字符串场景,特别是function的引入,极大的增强了replace的实力,从而使得我们操作字符游刃有余.</p>
<p>在写实例的时，我们需要搞懂几个<code>newSubStr</code>特殊变量名，他在实际应用中也很有作用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'gating'</span></span><br><span class="line"><span class="comment">// $&amp; 表示匹配到的字串，这里匹配到了 gating ，所以 $&amp; 就等于 gating</span></span><br><span class="line"><span class="built_in">console</span>.log(name.replace(<span class="regexp">/\w+/</span>,<span class="string">'$&amp;-$&amp;'</span>)) <span class="comment">// gating-gating</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"gating say hello for mosen"</span></span><br><span class="line"><span class="comment">// $1 表示匹配第一个括号里的内容 也就是 $1 就是 gating </span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/(^\w+)(.*?)(\w+)$/</span>,<span class="string">'$3$2$1'</span>)) <span class="comment">// mosen say hello for gating\</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hello = <span class="string">"hello,gating"</span></span><br><span class="line"><span class="comment">// $`当前匹配的子串左边的内容。</span></span><br><span class="line"><span class="built_in">console</span>.log(hello.replace(<span class="regexp">/gating/</span>,<span class="string">"&amp;.$`mosen"</span>)) <span class="comment">// hello,gating.hello,mosen</span></span><br><span class="line"><span class="comment">// $'当前匹配的子串右边的内容。(不是例子的例子)</span></span><br><span class="line"><span class="built_in">console</span>.log(hello.replace(<span class="regexp">/hello,/</span>,<span class="string">"$' say hi for $`"</span>)) <span class="comment">// gating say hi for gating</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// function 的 用法</span></span><br><span class="line"><span class="keyword">let</span> paragraph = <span class="string">"what is this?"</span></span><br><span class="line"><span class="keyword">let</span> res = paragraph.replace(<span class="string">" is this"</span>,(match,offset,string)=&gt;&#123;</span><br><span class="line">    <span class="comment">// match 匹配的子串</span></span><br><span class="line">    <span class="comment">// offset 偏移量 这是是4 也就是 偏移了what4个字符</span></span><br><span class="line">    <span class="comment">// string 元字符</span></span><br><span class="line">    <span class="built_in">console</span>.log(match,offset,string) <span class="comment">//  is this 4 what is this?</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">" is that"</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(res) <span class="comment">// what is that?</span></span><br></pre></td></tr></table></figure>

<p>了解了这些，那么我们就可以做写点比较实际的了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js 隐藏手机中间5位号码</span></span><br><span class="line"><span class="keyword">let</span> phone=<span class="string">'13700000137'</span></span><br><span class="line"><span class="built_in">console</span>.log(phone.replace(<span class="regexp">/(\d&#123;3&#125;)\d+(\d&#123;3&#125;)/</span>, <span class="string">'$1****$2'</span>)) <span class="comment">// 137****137</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将阿拉伯数字每三位一逗号分隔，如：1000转化为1,000</span></span><br><span class="line"><span class="keyword">let</span> price =  <span class="string">'3521.08'</span></span><br><span class="line"><span class="built_in">console</span>.log(price.replace(<span class="regexp">/(?=(?!^)(?:\d&#123;3&#125;)+(?:\.|$))(\d&#123;3&#125;(\.\d+$)?)/g</span>,<span class="string">',$1'</span>)) <span class="comment">// 3,521.08</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// html 转义，防止用户注入</span></span><br><span class="line"><span class="keyword">let</span> html = <span class="string">'&lt;div&gt;"hello &amp; world"&lt;/div&gt;'</span>;</span><br><span class="line"><span class="keyword">let</span> res = html.replace(<span class="regexp">/[&lt;&gt;\"\'\&amp;']/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(a)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'&lt;'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'&amp;lt;'</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'&gt;'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'&amp;gt;'</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'\"'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'&amp;quot;'</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'\''</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'&amp;#39;'</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'\&amp;'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'&amp;amp;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(res) <span class="comment">// &amp;lt;div&amp;gt;&amp;quot;hello &amp;amp; world&amp;quot;&amp;lt;/div&amp;gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 简易的字符串模板引擎</span></span><br><span class="line"><span class="keyword">let</span> template = <span class="string">"My name is &#123;name&#125;"</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>:<span class="string">'gating'</span>&#125;</span><br><span class="line"><span class="keyword">const</span> tmpl = <span class="function">(<span class="params">template,obj</span>)=&gt;</span> template.replace(<span class="regexp">/([^&#123;&#125;]*)&#123;(.*)&#125;/g</span>,(match,p1,p2) =&gt; (p1+obj[p2]))</span><br><span class="line"><span class="built_in">console</span>.log(tmpl(template,obj)) <span class="comment">// My name is gating</span></span><br></pre></td></tr></table></figure>

<h1 id="字符编码相关"><a href="#字符编码相关" class="headerlink" title="字符编码相关"></a>字符编码相关</h1><h2 id="charAt"><a href="#charAt" class="headerlink" title="charAt"></a>charAt</h2><p>charAt() 方法从一个字符串中返回指定的字符</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * str.charAt(index)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>index =&gt; 一个介于0 和字符串长度减1之间的整数。 (0~length-1) 如果没有提供索引，charAt() 将使用 0。如果指定的 index 值超出了该范围，则返回一个空字符串。</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>当前索引的字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"gating"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">0</span>)) <span class="comment">// g</span></span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">6</span>)) <span class="comment">// ""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// charAt 和 fromCharCode 用同样的问题，他不能识别高位编码</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"𠮷"</span>.charAt(<span class="number">0</span>)) <span class="comment">// �</span></span><br></pre></td></tr></table></figure>

<h2 id="charCodeAt"><a href="#charCodeAt" class="headerlink" title="charCodeAt"></a>charCodeAt</h2><p>charCodeAt() 方法返回0到65535之间的整数，表示给定索引处的UTF-16代码单元 (在 Unicode 编码单元表示一个单一的 UTF-16 编码单元的情况下，UTF-16 编码单元匹配 Unicode 编码单元。但在——例如 Unicode 编码单元 &gt; 0x10000 的这种——不能被一个 UTF-16 编码单元单独表示的情况下，只能匹配 Unicode 代理对的第一个编码单元) 。如果你想要整个代码点的值，使用 codePointAt()。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * str.charCodeAt(index)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>index =&gt; 一个大于等于 0，小于字符串长度的整数。如果不是一个数值，则默认为 0。</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>返回值是一表示给定索引处（String中index索引处）字符的 UTF-16 代码单元值的数字；如果索引超出范围，则返回 NaN。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"ABC"</span>.charCodeAt(<span class="number">0</span>)) <span class="comment">// 65</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"ABC"</span>.charCodeAt(<span class="number">1</span>)) <span class="comment">// 66</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"ABC"</span>.charCodeAt(<span class="number">3</span>)) <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 针对高位编码，他会拆分成两个双字节的形式再来获取</span></span><br><span class="line"><span class="comment">// 也就是 "\uD842\uDFB7".charCodeAt(0)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"𠮷"</span>.charCodeAt(<span class="number">0</span>)) <span class="comment">// 55362</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"𠮷"</span>.charCodeAt(<span class="number">1</span>)) <span class="comment">// 57271</span></span><br></pre></td></tr></table></figure>

<h2 id="codePointAt"><a href="#codePointAt" class="headerlink" title="codePointAt"></a>codePointAt</h2><p>codePointAt() 方法返回 一个 Unicode 编码点值的非负整数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * str.codePointAt(pos)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>pos =&gt; 这个字符串中需要转码的元素的位置。</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>返回值是在字符串中的给定索引的编码单元体现的数字(10进制数)，如果在索引处没找到元素则返回 undefined 。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"ABC"</span>.charCodeAt(<span class="number">0</span>)) <span class="comment">// 65</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"ABC"</span>.charCodeAt(<span class="number">3</span>)) <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"𠮷"</span>.codePointAt(<span class="number">0</span>)) <span class="comment">// 134071</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"𠮷"</span>.codePointAt(<span class="number">1</span>)) <span class="comment">// 57271</span></span><br></pre></td></tr></table></figure>

<p>汉字“𠮷”（注意，这个字不是“吉祥”的“吉”）的码点是0x20BB7，UTF-16 编码为0xD842 0xDFB7（十进制为55362 57271），需要4个字节储存。对于这种4个字节的字符，JavaScript 不能正确处理，字符串长度会误判为2，而且charAt方法无法读取整个字符，charCodeAt方法只能分别返回前两个字节和后两个字节的值。</p>
<blockquote>
<p>codePointAt 方法在第一个字符上，正确地识别了“𠮷”，返回了它的十进制码点 134071（即十六进制的20BB7），在第二个字符（即“𠮷”的后两个字节）codePointAt方法的结果与charCodeAt方法相同。</p>
</blockquote>
<blockquote>
<p>codePointAt方法返回的是码点的十进制值，如果想要十六进制的值，可以使用toString(16)方法转换一下。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">'𠮷a'</span></span><br><span class="line">s.codePointAt(<span class="number">0</span>) <span class="comment">// 134071</span></span><br><span class="line">s.codePointAt(<span class="number">1</span>) <span class="comment">// 57271</span></span><br><span class="line">s.codePointAt(<span class="number">2</span>) <span class="comment">// 97</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 你可能注意到了，codePointAt方法的参数，仍然是不正确的。</span></span><br><span class="line"><span class="comment">// 比如，上面代码中，字符a在字符串s的正确位置序号应该是 1，但是必须向codePointAt方法传入 2。</span></span><br><span class="line"><span class="comment">// 解决这个问题的一个办法是使用for...of循环，因为它会正确识别 32 位的 UTF-16 字符。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> ch <span class="keyword">of</span> s) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ch.codePointAt(<span class="number">0</span>).toString(<span class="number">16</span>)) <span class="comment">// 20bb7 61</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"\u&#123;20bb7&#125;"</span>) <span class="comment">// 𠮷</span></span><br></pre></td></tr></table></figure>

<h2 id="normalize"><a href="#normalize" class="headerlink" title="normalize"></a>normalize</h2><p>normalize() 方法会按照指定的一种 Unicode 正规形式将当前字符串正规化.</p>
<p>许多欧洲语言有语调符号和重音符号。为了表示它们，Unicode 提供了两种方法。一种是直接提供带重音符号的字符，比如Ǒ（\u01D1）。另一种是提供合成符号（combining character），即原字符与重音符号的合成，两个字符合成一个字符，比如O（\u004F）和ˇ（\u030C）合成Ǒ（\u004F\u030C）。</p>
<p>这两种表示方法，在视觉和语义上都等价，但是 JavaScript 不能识别。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * str.normalize(form)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>form =&gt; 四种 Unicode 正规形式 "NFC", "NFD", "NFKC", 以及 "NFKD" 其中的一个, 默认值为 "NFC".</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>正规化后的字符串。如果给 form 传入了非法的参数值, 则会抛出 RangeError 异常.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'\u01D1'</span>===<span class="string">'\u004F\u030C'</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'\u01D1'</span>.normalize() === <span class="string">'\u004F\u030C'</span>.normalize()) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// NFC参数返回字符的合成形式，NFD参数返回字符的分解形式。</span></span><br><span class="line"><span class="string">'\u004F\u030C'</span>.normalize(<span class="string">'NFC'</span>).length <span class="comment">// 1</span></span><br><span class="line"><span class="string">'\u004F\u030C'</span>.normalize(<span class="string">'NFD'</span>).length <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p><code>NFC</code>，默认参数，表示“标准等价合成”（Normalization Form Canonical Composition），返回多个简单字符的合成字符。所谓“标准等价”指的是视觉和语义上的等价。</p>
</li>
<li><p><code>NFD</code>，表示“标准等价分解”（Normalization Form Canonical Decomposition），即在标准等价的前提下，返回合成字符分解的多个简单字符。</p>
</li>
<li><p><code>NFKC</code>，表示“兼容等价合成”（Normalization Form Compatibility Composition），返回合成字符。所谓“兼容等价”指的是语义上存在等价，但视觉上不等价，比如“囍”和“喜喜”。（这只是用来举例，normalize方法不能识别中文。）</p>
</li>
<li><p><code>NFKD</code>，表示“兼容等价分解”（Normalization Form Compatibility Decomposition），即在兼容等价的前提下，返回合成字符分解的多个简单字符。</p>
</li>
</ol>
<blockquote>
<p>不过，normalize方法目前不能识别三个或三个以上字符的合成。这种情况下，还是只能使用正则表达式，通过 Unicode 编号区间判断。</p>
</blockquote>
<blockquote>
<p>此内容参考了 <a href="http://es6.ruanyifeng.com/#docs/string#normalize" target="_blank" rel="noopener">阮老师的normalize()</a></p>
</blockquote>
<h1 id="合并填充相关"><a href="#合并填充相关" class="headerlink" title="合并填充相关"></a>合并填充相关</h1><h2 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h2><p>concat() 方法将一个或多个字符串与原字符串连接合并，形成一个新的字符串并返回。</p>
<blockquote>
<p>强烈建议使用 赋值操作符（+, +=）代替 concat 方法。因为 concat 性能比较垃圾</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * str.concat(stringN)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>stringN =&gt; 和原字符串连接的多个字符串</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>连接后的字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"hello,"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.concat(<span class="string">"gating"</span>)) <span class="comment">// hello,gating</span></span><br></pre></td></tr></table></figure>

<h2 id="padEnd"><a href="#padEnd" class="headerlink" title="padEnd"></a>padEnd</h2><p>padEnd()  方法会用一个字符串填充当前字符串（如果需要的话则重复填充），返回填充后达到指定长度的字符串。从当前字符串的末尾（右侧）开始填充。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * str.padEnd(targetLength,padString)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>targetLength =&gt; 当前字符串需要填充到的目标长度。如果这个数值小于当前字符串的长度，则返回当前字符串本身。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>padString  =&gt; 填充字符串。如果字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断。此参数的缺省值为 " "（U+0020）。</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>在原字符串末尾填充指定的填充字符串直到目标长度所形成的新字符串。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"abc"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.padEnd(<span class="number">1</span>)) <span class="comment">// abc</span></span><br><span class="line"><span class="built_in">console</span>.log(str.padEnd(<span class="number">1</span>,<span class="string">"123"</span>)) <span class="comment">// abc</span></span><br><span class="line"><span class="built_in">console</span>.log(str.padEnd(<span class="number">4</span>,<span class="string">"123"</span>)) <span class="comment">// abc1</span></span><br><span class="line"><span class="built_in">console</span>.log(str.padEnd(<span class="number">7</span>,<span class="string">"123"</span>)) <span class="comment">// abc1231</span></span><br></pre></td></tr></table></figure>

<h2 id="padStart"><a href="#padStart" class="headerlink" title="padStart"></a>padStart</h2><p>padStart() 方法用另一个字符串填充当前字符串(重复，如果需要的话)，以便产生的字符串达到给定的长度。填充从当前字符串的开始(左侧)应用的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * str.padStart(targetLength,padString)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>targetLength =&gt; 当前字符串需要填充到的目标长度。如果这个数值小于当前字符串的长度，则返回当前字符串本身。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>padString  =&gt; 填充字符串。如果字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断。此参数的缺省值为 " "（U+0020）。</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>在原字符串开头填充指定的填充字符串直到目标长度所形成的新字符串。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"abc"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.padStart(<span class="number">1</span>)) <span class="comment">// abc</span></span><br><span class="line"><span class="built_in">console</span>.log(str.padStart(<span class="number">3</span>,<span class="string">'123'</span>)) <span class="comment">// abc</span></span><br><span class="line"><span class="built_in">console</span>.log(str.padStart(<span class="number">6</span>,<span class="string">'123'</span>)) <span class="comment">// 123abc</span></span><br><span class="line"><span class="built_in">console</span>.log(str.padStart(<span class="number">7</span>,<span class="string">'123'</span>)) <span class="comment">// 1231abc</span></span><br></pre></td></tr></table></figure>

<p>padStart()的常见用途是为数值补全指定位数和提示字符串格式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成 10 位的数值字符串</span></span><br><span class="line"><span class="string">'1'</span>.padStart(<span class="number">10</span>, <span class="string">'0'</span>) <span class="comment">// "0000000001"</span></span><br><span class="line"><span class="string">'12'</span>.padStart(<span class="number">10</span>, <span class="string">'0'</span>) <span class="comment">// "0000000012"</span></span><br><span class="line"><span class="string">'123456'</span>.padStart(<span class="number">10</span>, <span class="string">'0'</span>) <span class="comment">// "0000123456"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 提示字符串格式</span></span><br><span class="line"><span class="string">'12'</span>.padStart(<span class="number">10</span>, <span class="string">'YYYY-MM-DD'</span>) <span class="comment">// "YYYY-MM-12"</span></span><br><span class="line"><span class="string">'09-12'</span>.padStart(<span class="number">10</span>, <span class="string">'YYYY-MM-DD'</span>) <span class="comment">// "YYYY-09-12"</span></span><br></pre></td></tr></table></figure>

<h2 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h2><p>repeat() 构造并返回一个新字符串，该字符串包含被连接在一起的指定数量的字符串的副本。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * str.repeat(count)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>count =&gt; 介于0和正无穷大之间的整数 : [0, +∞) 。表示在新构造的字符串中重复了多少遍原字符串。重复次数不能为负数。重复次数必须小于 infinity，且长度不会大于最长的字符串。</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>包含指定字符串的指定数量副本的新字符串。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"gating"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.repeat(<span class="number">2</span>)) <span class="comment">// gatinggating</span></span><br><span class="line"><span class="comment">// 参数count将会被自动转换成整数(向下取整)</span></span><br><span class="line"><span class="built_in">console</span>.log(str.repeat(<span class="number">3.5</span>)) <span class="comment">// gatinggatinggating</span></span><br><span class="line"><span class="built_in">console</span>.log(str.repeat(<span class="number">3.4</span>)) <span class="comment">// gatinggatinggating</span></span><br><span class="line"><span class="comment">// 但是，如果参数是 0 到-1 之间的小数，则等同于 0，这是因为会先进行取整运算。</span></span><br><span class="line"><span class="built_in">console</span>.log(str.repeat(<span class="number">-0.5</span>)) <span class="comment">// ""</span></span><br><span class="line"><span class="built_in">console</span>.log(str.repeat(<span class="number">0</span>)) <span class="comment">// ""</span></span><br><span class="line"><span class="comment">// 参数NaN等同于 0。</span></span><br><span class="line"><span class="built_in">console</span>.log(str.repeat(<span class="literal">NaN</span>)) <span class="comment">// ""</span></span><br><span class="line"><span class="comment">// 如果repeat的参数是字符串，则会先转换成数字</span></span><br><span class="line"><span class="built_in">console</span>.log(str.repeat(<span class="string">"aaa"</span>)) <span class="comment">// ""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// RangeError: repeat count must be positive and less than inifinity</span></span><br><span class="line"><span class="built_in">console</span>.log(str.repeat(<span class="number">-1</span>)) </span><br><span class="line"><span class="built_in">console</span>.log(str.repeat(<span class="number">1</span>/<span class="number">0</span>))</span><br></pre></td></tr></table></figure>

<p>repeat 其实很适合我们调试的时候生成多份测试数据，比如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> newData = [<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设我们想生成 ["1","1","2","2","3","3"] 的双份数据，那么我们就可以通过 repeat 来实现</span></span><br><span class="line"><span class="keyword">let</span> newData = myDate.map(<span class="function"><span class="params">item</span>=&gt;</span>item.repeat(<span class="number">2</span>).split(<span class="string">''</span>)).reduce(<span class="function">(<span class="params">arr,val</span>)=&gt;</span>arr.concat(val))</span><br><span class="line"><span class="built_in">console</span>.log(newData)) <span class="comment">// ["1","1","2","2","3","3"]</span></span><br></pre></td></tr></table></figure>

<h1 id="搜索查找相关"><a href="#搜索查找相关" class="headerlink" title="搜索查找相关"></a>搜索查找相关</h1><h2 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h2><p>indexOf() 方法返回调用  String 对象中第一次出现的指定值的索引，开始在 fromIndex进行搜索。如果未找到该值，则返回-1。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * str.indexOf(searchValue,fromIndex)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>searchValue =&gt; 一个字符串表示被查找的值。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String/Number&#125;</span> </span>fromIndex =&gt; 表示调用该方法的字符串中开始查找的位置。可以是任意整数。默认值为 0。如果 fromIndex &lt; 0 则查找整个字符串（如同传进了 0）。如果 fromIndex &gt;= str.length，则该方法返回 -1。当被查找的字符串是一个空字符串，fromIndex &lt;= 0时返回0，0 &lt; fromIndex &lt;= str.length时返回fromIndex，fromIndex &gt; str.length时返回str.length。</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>指定值的第一次出现的索引; 如果没有找到 -1。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"gating"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"g"</span>)) <span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 这里的 -1 也就 fromIndex &lt; 0 时，str.indexOf("a",-1) 等同于 str.indexOf("a",0)</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"a"</span>,<span class="number">-1</span>)) <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 这里的 8 也就 fromIndex &gt; str.length 时，str.indexOf("a",8) 等同于 str.indexOf("a",6)</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"g"</span>,<span class="number">8</span>)) <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 区分大小写</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"G"</span>)) <span class="comment">// -1</span></span><br></pre></td></tr></table></figure>

<p>实际应用场景中，我们可以使用使用 indexOf 统计一个字符串中某个字符出现的次数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"gating"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countStr</span>(<span class="params">str,value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> pos = str.indexOf(<span class="string">'g'</span>);</span><br><span class="line">    <span class="keyword">while</span> (pos !== <span class="number">-1</span>) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        pos = str.indexOf(<span class="string">'g'</span>, pos + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(countStr(str,<span class="string">'g'</span>)) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h2 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf"></a>lastIndexOf</h2><p>lastIndexOf() 方法返回指定值在调用该方法的字符串中最后出现的位置，如果没找到则返回 -1。从该字符串的后面向前查找，从 fromIndex 处开始。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * str.indexOf(searchValue,fromIndex)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>searchValue =&gt; 一个字符串表示被查找的值。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String/Number&#125;</span> </span>fromIndex =&gt; 从调用该方法字符串的此位置处开始查找。可以是任意整数。默认值为 str.length。如果为负值，则被看作 0。如果 fromIndex &gt; str.length，则 fromIndex 被看作 str.length。</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>指定值的第一次出现的索引（从后往前数）; 如果没有找到 -1。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"gating"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">'g'</span>)) <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">'g'</span>,<span class="number">2</span>)) <span class="comment">// 0 </span></span><br><span class="line"><span class="comment">// 这里的 8 也就 fromIndex &gt; str.length 时，str.lastIndexOf("a",8) 等同于 str.lastIndexOf("a",6) 也就是 str.lastIndexOf("a")</span></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">'g'</span>,<span class="number">8</span>)) <span class="comment">// 5 </span></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">'g'</span>,<span class="number">-1</span>)) <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">'g'</span>,<span class="number">0</span>)) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>

<h2 id="search"><a href="#search" class="headerlink" title="search"></a>search</h2><p>search() 方法执行正则表达式和 String对象之间的一个搜索匹配。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * str.search(regexp)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Regexp&#125;</span> </span>regexp =&gt; 一个正则表达式（regular expression）对象。如果传入一个非正则表达式对象，则会使用 new RegExp(obj) 隐式地将其转换为正则表达式对象。</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>如果匹配成功，则 search() 返回正则表达式在字符串中首次匹配项的索引。否则，返回 -1。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"gating"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.search(<span class="string">"g"</span>)) <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(str.search(<span class="regexp">/g/</span>)) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>


<h2 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h2><p>includes() 方法用于判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * str.includes(searchString,position)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>searchString =&gt; 要在此字符串中搜索的字符串。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>position =&gt; 可选。从当前字符串的哪个索引位置开始搜寻子字符串，默认值为0。</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Boolean&#125;</span> </span>如果当前字符串包含被搜寻的字符串，就返回 true；否则返回 false。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"gating"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">"a"</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">"a"</span>,<span class="number">1</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">"a"</span>,<span class="number">2</span>)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在 Firefox 18 - 39中，这个方法的名称叫 contains()。 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/includes#String.prototype.contains()" target="_blank" rel="noopener">具体原因请查看</a></p>
</blockquote>
<h2 id="startsWith"><a href="#startsWith" class="headerlink" title="startsWith"></a>startsWith</h2><p>startsWith()方法用来判断当前字符串是否是以另外一个给定的子字符串“开头”的，根据判断结果返回 true 或 false。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * str.startsWith(searchString,position)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>searchString =&gt;要搜索的子字符串。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>position =&gt; 在 str 中搜索 searchString 的开始位置，默认值为 0，也就是真正的字符串开头处。</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Boolean&#125;</span> </span>如果当前字符串以搜素字符串开头，就返回 true；否则返回 false。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"gating"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">'g'</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">'g'</span>,<span class="number">1</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">'g'</span>,<span class="number">7</span>)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h2 id="endsWith"><a href="#endsWith" class="headerlink" title="endsWith"></a>endsWith</h2><p>endsWith()方法用来判断当前字符串是否是以另外一个给定的子字符串“结尾”的，根据判断结果返回 true 或 false。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * str.endsWith(searchString,position)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>searchString =&gt; 要搜索的子字符串。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>position =&gt; 可选。作为str的长度，默认值为 str.length。</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Boolean&#125;</span>  </span>如果传入的子字符串在搜索字符串的末尾就返回true；否则将返回 false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"gating"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">'g'</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 这里 position 为 2 表示 str 的值就是 ga，也就是相当于 ga.endsWith('g')</span></span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">'g'</span>,<span class="number">2</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">'g'</span>,<span class="number">7</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h1 id="截取相关"><a href="#截取相关" class="headerlink" title="截取相关"></a>截取相关</h1><h2 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h2><p>slice() 方法提取一个字符串的一部分，并返回一新的字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * str.slice(beginSlice,endSlice)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>beginSlice =&gt; 从该索引（以 0 为基数）处开始提取原字符串中的字符。如果值为负数，会被当做 sourceLength + beginSlice 看待，这里的sourceLength 是字符串的长度 (例如， 如果beginSlice 是 -3 则看作是: sourceLength - 3)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>endSlice =&gt; 可选。可选。在该索引（以 0 为基数）处结束提取字符串。如果省略该参数，slice会一直提取到字符串末尾。如果该参数为负数，则被看作是 sourceLength + endSlice，这里的 sourceLength 就是字符串的长度(例如，如果 endSlice 是 -3，则是, sourceLength - 3)。</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span>  </span>返回一个从原字符串中提取出来的新字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"gating"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">1</span>)) <span class="comment">// ating</span></span><br><span class="line"><span class="comment">// 这里的-1实际上就是 (6-1) 也就是 5 即 str.slice(5)</span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">-1</span>)) <span class="comment">// g</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的-1实际上就是 (6-1) 也就是 5 即 str.slice(0,5)</span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">0</span>,<span class="number">-1</span>)) <span class="comment">// gatin</span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">-2</span>,<span class="number">-1</span>)) <span class="comment">// n</span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">-1</span>,<span class="number">-2</span>)) <span class="comment">// ""</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：slice() 提取的新字符串包括beginSlice但不包括 endSlice。</p>
</blockquote>
<h2 id="substr"><a href="#substr" class="headerlink" title="substr"></a>substr</h2><p>substr() 方法返回一个字符串中从指定位置开始到指定字符数的字符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * str.substr(start,length)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>searchString =&gt; 开始提取字符的位置。如果为负值，则被看作 strLength + start，其中 strLength 为字符串的长度（例如，如果 start 为 -3，则被看作 strLength + (-3)）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>position =&gt; 可选。提取的字符数。默认是strLength</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span>  </span>返回一个从原字符串中提取出来的新字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"gating"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">1</span>)) <span class="comment">// ating</span></span><br><span class="line"><span class="comment">// 这里的-1实际上就是 (6-1) 也就是 5 即 str.slice(5)</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">-1</span>)) <span class="comment">// g</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为长度不能小于0,所以返回""</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">-1</span>,<span class="number">-2</span>)) <span class="comment">// ""</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意:在IE8下,substr()方法传递负值会返回原始的字符串,IE9修复了此BUG</p>
</blockquote>
<h2 id="substring"><a href="#substring" class="headerlink" title="substring"></a>substring</h2><p>substring() 方法返回一个字符串在开始索引到结束索引之间的一个子集, 或从开始索引直到字符串的末尾的一个子集。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * str.substring(indexStart,indexEnd)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>indexStart =&gt; 需要截取的第一个字符的索引，该字符作为返回的字符串的首字母。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>indexEnd =&gt; 可选。一个 0 到字符串长度之间的整数，以该数字为索引的字符不包含在截取的字符串内。</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span>  </span>包含给定字符串的指定部分的新字符串。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"gating"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">0</span>,<span class="number">3</span>)) <span class="comment">// gat</span></span><br><span class="line"><span class="comment">// 如果 indexStart 大于 indexEnd，则会变成 str.substring(0,3)</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">3</span>,<span class="number">0</span>)) <span class="comment">// gat</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果任一参数小于 0 或为 NaN，则被当作 0。</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">-2</span>,<span class="number">3</span>)) <span class="comment">// gat</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="literal">NaN</span>,<span class="number">3</span>)) <span class="comment">// gat</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">4</span>,<span class="number">4</span>)) <span class="comment">// ""</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">0</span>)) <span class="comment">// gating</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">0</span>,<span class="number">10</span>)) <span class="comment">// gating</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>substring 提取从 indexStart 到 indexEnd（不包括）</p>
</blockquote>
<ul>
<li>如果 indexStart 等于 indexEnd，substring 返回一个空字符串。</li>
<li>如果省略 indexEnd，substring 提取字符一直到字符串末尾。</li>
<li>如果任一参数小于 0 或为 NaN，则被当作 0。</li>
<li>如果任一参数大于 stringName.length，则被当作 stringName.length。</li>
<li>如果 indexStart 大于 indexEnd，则 substring 的执行效果就像两个参数调换了一样。</li>
</ul>
<h1 id="转换大小写相关"><a href="#转换大小写相关" class="headerlink" title="转换大小写相关"></a>转换大小写相关</h1><blockquote>
<p>注意: toLocaleLowerCase、toLocaleUpperCase 按照本地方式把字符串转换为小写。只有几种语言（如土耳其语）具有地方特有的大小写映射。</p>
</blockquote>
<h2 id="toLowerCase"><a href="#toLowerCase" class="headerlink" title="toLowerCase"></a>toLowerCase</h2><p>toLowerCase() 会将调用该方法的字符串值转为小写形式，并返回。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * str.toLowerCase()</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span>  </span>一个新的字符串，表示串转换为小写的调用字符。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"GATING"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toLowerCase()) <span class="comment">// gating</span></span><br></pre></td></tr></table></figure>

<h2 id="toLocaleLowerCase"><a href="#toLocaleLowerCase" class="headerlink" title="toLocaleLowerCase"></a>toLocaleLowerCase</h2><p>toLocaleLowerCase() 根据任何特定于语言环境的案例映射，将表示调用字符串的新字符串转换为小写。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * str.toLocaleLowerCase()</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span>  </span>根据任何特定于语言环境的案例映射，将表示调用字符串的新字符串转换为小写。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"GATING"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toLocaleLowerCase()) <span class="comment">// gating</span></span><br></pre></td></tr></table></figure>

<h2 id="toUpperCase"><a href="#toUpperCase" class="headerlink" title="toUpperCase"></a>toUpperCase</h2><p>toUpperCase() 将调用该方法的字符串值转换为大写形式，并返回。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * str.toUpperCase()</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span>  </span>将调用该方法的字符串值转换为大写形式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"gating"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toUpperCase()) <span class="comment">// GATING</span></span><br></pre></td></tr></table></figure>


<h2 id="toLocaleUpperCase"><a href="#toLocaleUpperCase" class="headerlink" title="toLocaleUpperCase"></a>toLocaleUpperCase</h2><p>toLocaleUpperCase() 将调用该方法的字符串值转换为大写形式，并返回。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * str.toLocaleUpperCase()</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span>  </span>一个新的字符串，即根据本地化的大小写映射规则将输入的字符串转化成大写形式的结果。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"gating"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toLocaleUpperCase()) <span class="comment">// GATING</span></span><br></pre></td></tr></table></figure>

<h1 id="删除空白字符相关"><a href="#删除空白字符相关" class="headerlink" title="删除空白字符相关"></a>删除空白字符相关</h1><h2 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h2><p>trim() 方法会从一个字符串的两端删除空白字符。在这个上下文中的空白字符是所有的空白字符 (space, tab, no-break space 等) 以及所有行终止符字符（如 LF，CR）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * str.trim()</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span>  </span>返回方法移除原字符串两端端的连续空白符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"   gating   "</span></span><br><span class="line"><span class="built_in">console</span>.log(str.trim()) <span class="comment">// "gating"</span></span><br></pre></td></tr></table></figure>

<h2 id="trimRight"><a href="#trimRight" class="headerlink" title="trimRight"></a>trimRight</h2><p>trimRight() 方法从一个字符串的右端移除空白字符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * str.trimRight()</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span>  </span>返回方法移除原字符串右端的连续空白符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"gating   "</span></span><br><span class="line"><span class="built_in">console</span>.log(str.trimRight()) <span class="comment">// "gating"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 兼容生产环境</span></span><br><span class="line"><span class="keyword">const</span> trimRight = <span class="function">(<span class="params">str</span>)=&gt;</span> str.replace(<span class="regexp">/(\s*$)/g</span>, <span class="string">""</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该特性是非标准的，请尽量不要在生产环境中使用它！</p>
</blockquote>
<h2 id="trimLeft"><a href="#trimLeft" class="headerlink" title="trimLeft"></a>trimLeft</h2><p>trimLeft() 方法从一个字符串的左端移除空白字符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * str.trimLeft()</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span>  </span>返回方法移除原字符串左端的连续空白符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"  gating"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.trimLeft()) <span class="comment">// "gating"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 兼容生产环境</span></span><br><span class="line"><span class="keyword">const</span> trimLeft = <span class="function">(<span class="params">str</span>)=&gt;</span> str.replace(<span class="regexp">/(^\s*)/g</span>, <span class="string">""</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该特性是非标准的，请尽量不要在生产环境中使用它！</p>
</blockquote>
<h1 id="两个不知名的方法"><a href="#两个不知名的方法" class="headerlink" title="两个不知名的方法"></a>两个不知名的方法</h1><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h2><p>toString() 方法返回指定对象的字符串形式。</p>
<p>String 对象覆盖了Object 对象的 toString 方法；并没有继承 Object.toString()。对于 String 对象，toString 方法返回该对象的字符串形式，和 String.prototype.valueOf() 方法返回值一样</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * str.toString()</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span>  </span>返回指定对象的字符串形式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"gating"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str.toString()) <span class="comment">// gating</span></span><br></pre></td></tr></table></figure>

<h2 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf"></a>valueOf</h2><p>valueOf() 方法返回一个String对象的原始值（primitive value）。</p>
<p>String 对象的 valueOf 方法返回一个String对象的原始值。该值等同于String.prototype.toString()。</p>
<p>该方法通常在 JavaScript 内部被调用，而不是在代码里显示调用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * str.valueOf()</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span>  </span>返回指定对象的字符串形式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"gating"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str.valueOf()) <span class="comment">// gating</span></span><br></pre></td></tr></table></figure>

<h1 id="排序相关"><a href="#排序相关" class="headerlink" title="排序相关"></a>排序相关</h1><h2 id="localeCompare"><a href="#localeCompare" class="headerlink" title="localeCompare"></a>localeCompare</h2><p>localeCompare() 方法返回一个数字来指示一个参考字符串是否在排序顺序前面或之后或与给定字符串相同。</p>
<p>新的 locales 、 options 参数能让应用程序定制函数的行为即指定用来排序的语言。  locales 和 options 参数是依赖于具体实现的，在旧的实现中这两个参数是完全被忽略的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * str.localeCompare(compareString,locales,options)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>compareString =&gt; 用来比较的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;locales&#125;</span> </span>locales =&gt; 可选。用来表示一种或多种语言或区域的一个符合 BCP 47 标准的字符串或一个字符串数组。locales参数的一般形式与解释， 详情请参考 MDN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;options&#125;</span> </span>options =&gt; 可选。 支持下列的一些或全部属性的一个对象: 详情请参考 MDN</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span>  </span>如果引用字符存在于比较字符之前则为负数; 如果引用字符存在于比较字符之后则为正数; 相等的时候返回 0 .不同浏览器之间（以及不同浏览器版本之间）返回的正负数的值各有不同</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"b"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.localeCompare(<span class="string">"b"</span>)) <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(str.localeCompare(<span class="string">"a"</span>)) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(str.localeCompare(<span class="string">"c"</span>)) <span class="comment">// -1</span></span><br></pre></td></tr></table></figure>

<p>实际上，我们就可以通过 localeCompare 实现中文排序了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">"北京"</span>,<span class="string">"上海"</span>,<span class="string">"深圳"</span>,<span class="string">"广州"</span>]</span><br><span class="line"><span class="keyword">let</span> res1 = arr.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b)</span><br><span class="line"><span class="comment">// 传统的排序方法，你会发现顺序是有问题的</span></span><br><span class="line"><span class="built_in">console</span>.log(res1) <span class="comment">// ["北京", "上海", "广州", "深圳"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 localeCompare 我们就实现了中文的排序了</span></span><br><span class="line"><span class="keyword">let</span> res2 = arr.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a.localeCompare(<span class="built_in">String</span>(b)))</span><br><span class="line"><span class="built_in">console</span>.log(res2) <span class="comment">// ["北京", "广州", "上海", "深圳"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是其实这个还是没有实现我们的需求，假设我们 数组既有数字、英文、中文、特殊符号的话，我们的排序就不能这么简单的排序了</span></span><br><span class="line"><span class="keyword">let</span> myData = [<span class="string">"北京"</span>,<span class="string">"上海"</span>,<span class="string">"深圳"</span>,<span class="string">"广州"</span>,<span class="literal">null</span>,<span class="literal">undefined</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="string">"apple"</span>,<span class="string">"bird"</span>,<span class="string">"banana"</span>]</span><br><span class="line"><span class="keyword">let</span> result = myData.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r = a - b;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isNaN</span>(r))&#123;</span><br><span class="line">        r = <span class="built_in">String</span>(a).localeCompare(<span class="built_in">String</span>(b));</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare" target="_blank" rel="noopener">localeCompare方法，十分建议看看MDN</a>，因为我实在太菜了 ┭┮﹏┭┮</p>
</blockquote>
<p>当比较大量字符串时， 比如比较大量数组时， 最好创建一个 <code>[Intl.Collator](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Collator)</code> 对象并使用compare 属性所提供的函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Intl.Collator 是用于语言敏感字符串比较的 collators构造函数。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">letterSort</span>(<span class="params">lang, letters</span>) </span>&#123;</span><br><span class="line">  letters.sort(<span class="keyword">new</span> <span class="built_in">Intl</span>.Collator(lang).compare)</span><br><span class="line">  <span class="keyword">return</span> letters;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体请看上面 MDN 的说明</span></span><br><span class="line"><span class="built_in">console</span>.log(letterSort(<span class="string">'de'</span>, [<span class="string">'a'</span>,<span class="string">'z'</span>,<span class="string">'ä'</span>])) <span class="comment">// ["a", "ä", "z"]</span></span><br><span class="line"><span class="built_in">console</span>.log(letterSort(<span class="string">'sv'</span>, [<span class="string">'a'</span>,<span class="string">'z'</span>,<span class="string">'ä'</span>])) <span class="comment">// ["a", "z", "ä"]</span></span><br></pre></td></tr></table></figure>


<h1 id="文中某些知识点参考链接"><a href="#文中某些知识点参考链接" class="headerlink" title="文中某些知识点参考链接"></a>文中某些知识点参考链接</h1><p><a href="http://es6.ruanyifeng.com/#docs/string" target="_blank" rel="noopener">阮老师的es6入门，字符串的扩展 推荐！</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare" target="_blank" rel="noopener">localeCompare方法，十分建议看看MDN</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Collator" target="_blank" rel="noopener">Intl.Collator</a></p>
<p><a href="https://github.com/sunmaobin/sunmaobin.github.io/issues/43" target="_blank" rel="noopener">Array.sort高级用法</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/33335629" target="_blank" rel="noopener">JavaScript 正则表达式匹配汉字</a></p>
<p><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="noopener">正则表达式30分钟入门教程 推荐</a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这里我就不做总结了，留个小作业给各位观众老爷，自己总结下咯</p>
<p>最后，感谢各位观众老爷观看啦O(∩_∩)O</p>
]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>数组的方法的总结和使用</title>
    <url>/2020/03/22/%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B9%E6%B3%95%E7%9A%84%E6%80%BB%E7%BB%93%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>JavaScript 中的数组是一个很特别的存在，他不像Java ，专门搞了 List 这样的一整套的东西，JS终端数组完全可以当作栈或队列来使用，数组的四大操作：pop、push、shift、unshift。</p>
<p>我今天写这篇博客，主要是写一篇总结，以备以后查看。</p>
<p>对于数组方法，我们应该关心的只有两个问题，<b>返回值是什么,会不会修改原数组，</b>典型的例子就是 splice() 和 slice() 这两个方法。</p>
<p>接下来，带着这两个问题，我会相对详细的总结一下我们<b>数组原型（数组实例）</b>里面所拥有的方法和属性，另外，常用的方法，我会加上一个常用的例子（应用场景）</p>
<blockquote>
<p>ps: 文中有些和数组方法不是太相关的知识，仅供了解，这里就不展开了（实际上也是我太垃圾了0 0，不懂） 具体我会在文末放上相关链接 </p>
</blockquote>
<p>下面将不再重复这些方法的 callbak 的参数</p>
<blockquote>
<p>（find、findIndex、some、filter、every、map，forEach，flatMap）的callback 被调用时会传入三个参数：当前元素值，元素的索引，原数组。这些方法都不会改变元素组，但是，如果你操作第三个参数，那就不一样了。</p>
</blockquote>
<h1 id="数组的属性"><a href="#数组的属性" class="headerlink" title="数组的属性"></a>数组的属性</h1><h2 id="length"><a href="#length" class="headerlink" title="length"></a>length</h2><p>length 是Array的实例属性。返回或设置一个数组中的元素个数。该值是一个无符号 32-bit 整数，并且总是大于数组最高项的下标。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.length) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<p>length 属性的值是一个 0 到 232-1 的整数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">4294967296</span>) <span class="comment">// 2的32次方 = 4294967296 </span></span><br><span class="line"><span class="comment">// Uncaught RangeError: Invalid array length无效的数组长度</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">-100</span>) <span class="comment">// 负号</span></span><br><span class="line"><span class="comment">// Uncaught RangeError: Invalid array length无效的数组长度</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1)</span><br></pre></td></tr></table></figure>

<p>你还可以通过 length 来截断数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">arr.length = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1,2]</span></span><br></pre></td></tr></table></figure>

<h2 id="Array-length-属性的属性特性"><a href="#Array-length-属性的属性特性" class="headerlink" title="Array.length 属性的属性特性"></a>Array.length 属性的属性特性</h2><table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>writable</td>
<td>true</td>
</tr>
<tr>
<td>enumerable</td>
<td>false</td>
</tr>
<tr>
<td>configurable</td>
<td>false</td>
</tr>
</tbody></table>
<ul>
<li>Writable ：如果设置为false，该属性值将不能被修改。</li>
<li>Configurable ：如果设置为false，删除或更改任何属性都将会失败。</li>
<li>Enumerable ：如果设置为 true ，属性可以通过迭代器for或for…in进行迭代。</li>
</ul>
<p>看到这里，估计有人想问，既然 length 属性是可以修改的，那么我们可不可以重定义数组对象的 length 属性呢？答案是可以的，但是会受到一般的重定义限制。并且并不是所有浏览器都允许 Array.length 的重定义。这里就不展开了，如有兴趣请看<a href="#文中某些知识点参考链接">文末的链接</a></p>
<h1 id="数组的静态方法"><a href="#数组的静态方法" class="headerlink" title="数组的静态方法"></a>数组的静态方法</h1><h2 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray()"></a>Array.isArray()</h2><p>在这个方法没出来之前，很多早期类库是通过下列代码来判断的（鸭子判断），文末送上玉伯大佬的链接，希望大家都去了解一下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">object</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> object != <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> object === <span class="string">"object"</span> &amp;&amp;</span><br><span class="line">    <span class="string">'splice'</span> <span class="keyword">in</span> object &amp;&amp; <span class="string">'join'</span> <span class="keyword">in</span> object</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直到后来有神人出山，写出了一段神码，此代码一出，天下震惊，引各路类库竞折腰。这代码，不不仅仅解决了数组的问题，而是解决了 isXxx 一类问题。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">"[object Array]"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对现代浏览器来说，上面的写法，依旧让各大浏览器引擎的实现者觉得很难受，于是直接有了Array.isArray方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Array.isArray(obj)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>obj =&gt; 需要检测的值</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Boolean&#125;</span> </span>如果对象是 Array， 则为true;否则为false。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="built_in">Array</span>.isArray([]) <span class="comment">// true</span></span><br><span class="line"> <span class="comment">// 鲜为人知的事实：其实 Array.prototype 也是一个数组。</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="built_in">Array</span>.prototype) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h2><p>Array.from() 方法从一个类似数组或可迭代对象中创建一个新的数组实例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Array.from(arrayLike,mapFn,thisArg)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Integer&#125;</span> </span>arrayLike =&gt; 想要转换成数组的伪数组对象或可迭代对象。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Function&#125;</span> </span>mapFn =&gt; 如果指定了该参数，新数组中的每个元素会执行该回调函数。 (可选)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>thisArg =&gt; 可选参数，执行回调函数 mapFn 时 this 对象。 (可选)</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Array </span>一个新的数组实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(<span class="string">'foo'</span>)) <span class="comment">// ["f", "o", "o"]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], x =&gt; x + x)) <span class="comment">// [2,4,6]</span></span><br><span class="line"><span class="built_in">Array</span>.from([<span class="number">1</span>],<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// &#123;a: 1&#125;</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">&#125;,&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>实际上，通过 Array.from 我们就可以做一些很常见的事了，比如我们的数组去重合并</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> combine = <span class="function">(<span class="params">...arg</span>)=&gt;</span>&#123;</span><br><span class="line">     <span class="keyword">let</span> arr = [].concat.apply([], arg); </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> m = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>], n = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>]; </span><br><span class="line"><span class="built_in">console</span>.log(combine(m,n)) <span class="comment">// [1, 2, 3, 4];</span></span><br></pre></td></tr></table></figure>

<h2 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h2><p>Array.of() 方法创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型。</p>
<p>Array.of() 和 Array 构造函数之间的区别在于处理整数参数：Array.of(7) 创建一个具有单个元素 7 的数组，而 Array(7) 创建一个长度为7的空数组（注意：这是指一个有7个空位的数组，而不是由7个undefined组成的数组）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Array.of(elementN)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>elementN =&gt; 任意个参数，将按顺序成为返回数组中的元素。</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> </span>新的 Array 实例。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">7</span>);       <span class="comment">// [7] </span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">7</span>);          <span class="comment">// [ , , , , , , ]</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);    <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<h1 id="拷贝填充相关"><a href="#拷贝填充相关" class="headerlink" title="拷贝填充相关"></a>拷贝填充相关</h1><h2 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h2><p>concat() 方法用于合并两个或多个数组。此方法<b>不会更改原数组</b>，而是返回一个新数组。</p>
<p>有个降维的例子会在 reduce() ，这里就不过讲解了，避免重复</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * old_array.concat(valueN])</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>valueN =&gt; 将数组和/或值连接成新数组。详情请参阅下文描述。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> </span>新的 Array 实例</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr1.concat(arr2)) <span class="comment">// [1,2,3,4,5,6]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1) <span class="comment">// [1,2,3]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2) <span class="comment">// [4,5,6]</span></span><br></pre></td></tr></table></figure>

<p>实际应用中，我们可以用 concat 和 reduce 搭配，实现扁平化数组(降维)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多维数组变成一维数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> </span>arr =&gt; 数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Boolean&#125;</span> </span>shallow =&gt; 数组将只减少一维的嵌套</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> flatten =  <span class="function">(<span class="params">arr, shallow</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (shallow) &#123;</span><br><span class="line">      <span class="keyword">var</span> arr = arr.reduce(<span class="function">(<span class="params">arr, val</span>) =&gt;</span> arr.concat(val), [])</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> arr = arr.reduce(<span class="function">(<span class="params">arr, val</span>) =&gt;</span> arr.concat(<span class="built_in">Array</span>.isArray(val) ? flatten(val) : val), [])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,[<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>]],<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(flatten(arr,<span class="literal">true</span>)) <span class="comment">// [1, 2, [3,4], 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(flatten(arr)) <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>

<h2 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin"></a>copyWithin</h2><p>copyWithin() 方法浅复制数组的一部分到同一数组中的另一个位置，并返回它，而不修改其大小。此方法<b>会更改现有数组</b></p>
<blockquote>
<p>ps：参数target,start和end 必须为整数。如果start为负，则其指定的索引位置等同于length+start，length为数组的长度。end也是如此。(copyWithin,fill等方法的start、end参数同理)</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * arr.copyWithin(target,start,end)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>target =&gt; 0 为基底的索引，复制序列到该位置。如果是负数，target 将从末尾开始计算。</span></span><br><span class="line"><span class="comment">如果 target 大于等于 arr.length，将会不发生拷贝。如果 target 在 start 之后，复制的序列将被修改以符合 arr.length。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>start =&gt; 0 为基底的索引，开始复制元素的起始位置。如果是负数，start 将从末尾开始计算</span></span><br><span class="line"><span class="comment">如果 start 被忽略，copyWithin 将会从0开始复制 (可选)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>end =&gt; 0 为基底的索引，开始复制元素的结束位置。copyWithin 将会拷贝到该位置，但不包括 end 这个位置的元素。如果是负数， end 将从末尾开始计算。如果 end 被忽略，copyWithin 将会复制到 arr.length (可选)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> </span>改变了的数组</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.copyWithin(<span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>)) <span class="comment">// [4, 2, 3, 4, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [4, 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment">// -2表示复制到 ([1, 2, 3, 4, 5].length - 2) 的位置去，这里指3</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">-2</span>)) <span class="comment">// [1, 2, 3, 1, 2]</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, <span class="number">3</span>)) <span class="comment">// [4, 5, 3, 4, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">-2</span>, <span class="number">-3</span>, <span class="number">-1</span>)) <span class="comment">// [1, 2, 3, 3, 4]</span></span><br></pre></td></tr></table></figure>

<h2 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h2><p>fill() 方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。<b>不包括终止索引</b>。此方法<b>会更改现有数组</b></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * arr.fill(value,start,end)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>value =&gt; 用来填充数组元素的值。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>start =&gt; 起始索引，默认值为0。(可选)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>end =&gt; 起始索引，默认值为this.length。(可选)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> </span>修改后的数组</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.fill(<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>)) <span class="comment">// [1, 2, 0, 0]</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>)) <span class="comment">// [4,4,4]</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>,<span class="number">1</span>)) <span class="comment">// [1,4,4]</span></span><br><span class="line"><span class="comment">// 这里的-1实际上就是 (-1+3) 也就是 2</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>,<span class="number">-1</span>)) <span class="comment">// [1,2,4]</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>,<span class="number">-2</span>,<span class="number">-1</span>)) <span class="comment">// [1,4,3]</span></span><br></pre></td></tr></table></figure>


<h1 id="搜索查找相关"><a href="#搜索查找相关" class="headerlink" title="搜索查找相关"></a>搜索查找相关</h1><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p>find() 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * arr.find(callback,thisArg)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Function&#125;</span> </span>callback =&gt; 用来测试每个元素的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>thisArg =&gt; 可选参数，执行回调函数 mapFn 时 this 对象。 (可选)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * callback 被调用时会传入三个参数：当前元素值，元素的索引，原数组。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>当某个元素通过 callback 的测试时，返回数组中最先通过的值，否则返回 undefined</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.find(<span class="function"><span class="params">item</span>=&gt;</span>item&gt;<span class="number">2</span>)) <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.find(<span class="function"><span class="params">item</span>=&gt;</span>item&gt;<span class="number">6</span>)) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>实际应用场景中，我们可以用对象的属性查找数组里的对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> people = [&#123;</span><br><span class="line">    name:<span class="string">'gating'</span>,</span><br><span class="line">    age:<span class="number">18</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">    name:<span class="string">'blue'</span>,</span><br><span class="line">    age:<span class="number">15</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">    name:<span class="string">'family'</span>,</span><br><span class="line">    age:<span class="number">18</span></span><br><span class="line">&#125;]</span><br><span class="line"><span class="keyword">const</span> findName = <span class="function">(<span class="params">arr</span>) =&gt;</span> arr.name === <span class="string">'gating'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(people.find(findName)) <span class="comment">// &#123;name: "gating", age: 18&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex"></a>findIndex</h2><p>findIndex()方法返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * arr.findIndex(callback,thisArg)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Function&#125;</span> </span>callback =&gt; 用来测试每个元素的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>thisArg =&gt; 可选参数，执行回调函数 mapFn 时 this 对象。 (可选)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * callback 被调用时会传入三个参数：当前元素值，元素的索引，原数组。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>当某个元素通过 callback 的测试时，返回数组中最先通过的值的索引值，否则返回 -1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.findIndex(<span class="function"><span class="params">item</span>=&gt;</span>item&gt;<span class="number">2</span>)) <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.findIndex(<span class="function"><span class="params">item</span>=&gt;</span>item&gt;<span class="number">6</span>)) <span class="comment">// -1</span></span><br></pre></td></tr></table></figure>
<p>实际应用场景同 find() ,这里就不重复了</p>
<h2 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h2><p>indexOf()方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。</p>
<blockquote>
<p>indexOf 和 lastIndexOf 都是使用 === 来进行判断 </p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * arr.indexOf(searchElement,fromIndex)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>searchElement =&gt; 要查找的元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>fromIndex =&gt; 开始查找的位置。如果该索引值大于或等于数组长度，意味着不会在数组里查找，返回-1。如果参数中提供的索引值是一个负值，则将其作为数组末尾的一个抵消，即-1表示从最后一个元素开始查找，-2表示从倒数第二个元素开始查找 ，以此类推。 注意：如果参数中提供的索引值是一个负值，并不改变其查找顺序，查找顺序仍然是从前向后查询数组。如果抵消后的索引值仍小于0，则整个数组都将会被查询。其默认值为0. (可选)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>首个被找到的元素在数组中的索引位置; 若没有找到则返回 -1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'a'</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="string">'a'</span>)) <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="string">'a'</span>,<span class="number">-1</span>)) <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="string">'d'</span>)) <span class="comment">// -1</span></span><br></pre></td></tr></table></figure>

<p>实际应用场景中，我们不可能之只找出一个同名元素的索引值，我们可能需要找出同名的元素的所有位置，于是乎</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 存放索引的数组</span></span><br><span class="line"><span class="keyword">const</span> indices = [];</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'a'</span>]</span><br><span class="line"><span class="comment">// 要查找的元素</span></span><br><span class="line"><span class="keyword">const</span> searchElement = <span class="string">'a'</span></span><br><span class="line"><span class="comment">// 当前的索引</span></span><br><span class="line"><span class="keyword">let</span> idx = arr.indexOf(searchElement);</span><br><span class="line"><span class="keyword">while</span> (idx != <span class="number">-1</span>) &#123;</span><br><span class="line">  indices.push(idx);</span><br><span class="line">  idx = arr.indexOf(searchElement, idx + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(indices) <span class="comment">// [0, 3]</span></span><br></pre></td></tr></table></figure>


<h2 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf"></a>lastIndexOf</h2><p>lastIndexOf() 方法返回指定元素（也即有效的 JavaScript 值或变量）在数组中的最后一个的索引，如果不存在则返回 -1。从数组的后面向前查找，从 fromIndex 处开始。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * arr.lastIndexOf(searchElement,fromIndex = arr.length - 1)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>searchElement =&gt; 要查找的元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>fromIndex =&gt; 从此位置开始逆向查找。默认为数组的长度减 1，即整个数组都被查找。如果该值大于或等于数组的长度，则整个数组会被查找。如果为负值，将其视为从数组末尾向前的偏移。即使该值为负，数组仍然会被从后向前查找。如果该值为负时，其绝对值大于数组长度，则方法返回 -1，即数组不会被查找。 (可选)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>数组中最后一个元素的索引，如未找到返回-1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'a'</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="string">'a'</span>)) <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="string">'a'</span>,<span class="number">-1</span>)) <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="string">'d'</span>)) <span class="comment">// -1</span></span><br></pre></td></tr></table></figure>

<p>实例：查找所有元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> indices = []</span><br><span class="line"><span class="keyword">const</span> array = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'d'</span>]</span><br><span class="line"><span class="keyword">const</span> element = <span class="string">'a'</span></span><br><span class="line"><span class="keyword">let</span> idx = array.lastIndexOf(element)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (idx != <span class="number">-1</span>) &#123;</span><br><span class="line">  indices.push(idx);</span><br><span class="line">  idx = (idx &gt; <span class="number">0</span> ? array.lastIndexOf(element, idx - <span class="number">1</span>) : <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(indices) <span class="comment">// [4, 2, 0];</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，我们要单独处理idx==0时的情况，因为如果是第一个元素，忽略了fromIndex参数则第一个元素总会被查找。这不同于indexOf方法</p>
</blockquote>
<h2 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h2><p>includes() 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。</p>
<ol>
<li><p>如果fromIndex 大于等于数组长度 ，则返回 false 。该数组不会被搜索</p>
</li>
<li><p>如果 fromIndex 为负值，计算出的索引将作为开始搜索searchElement的位置。如果计算出的索引小于 0，则整个数组都会被搜索。</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * arr.includes(searchElement,fromIndex = 0)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>searchElement =&gt; 要查找的元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>fromIndex =&gt; 从该索引处开始查找 searchElement。如果为负值，则按升序从 array.length - fromIndex 的索引开始搜索。默认为 0。 (可选)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Boolean&#125;</span> </span>一个 Boolean 值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="literal">NaN</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="number">1</span>, <span class="number">-100</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="number">1</span>, <span class="number">5</span>)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>实际的应用场景，通过可以解决我们找出两个数组的 数组交集 和 数组差集</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组交集</span></span><br><span class="line"><span class="keyword">const</span> intersection = <span class="function">(<span class="params">arr1, arr2</span>) =&gt;</span> arr1.filter(<span class="function"><span class="params">v</span> =&gt;</span> arr2.includes(v))</span><br><span class="line"><span class="comment">// 数组差集</span></span><br><span class="line"><span class="keyword">const</span> difference = <span class="function">(<span class="params">arr1, arr2</span>) =&gt;</span> [...arr1, ...arr2].filter(<span class="function"><span class="params">v</span> =&gt;</span> !arr1.includes(v) || !arr2.includes(v))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">console</span>.log(intersection(arr1,arr2)) <span class="comment">// [2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(difference(arr1,arr2)) <span class="comment">// [1, 4]</span></span><br></pre></td></tr></table></figure>

<h1 id="操作相关"><a href="#操作相关" class="headerlink" title="操作相关"></a>操作相关</h1><h2 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h2><p>slice() 方法返回一个新的数组对象，这一对象是一个由 begin和 end（不包括end）决定的原数组的浅拷贝。此方法<b>不会更改原数组</b>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Array.slice(begin,end)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>begin =&gt; 从该索引处开始提取原数组中的元素（从0开始）。（可选）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>end =&gt; 在该索引处结束提取原数组元素（从0开始）。slice会提取原数组中索引从 begin 到 end 的所有元素（包含begin，但不包含end）。（可选）</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> </span>一个含有提取元素的新数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.slice()) <span class="comment">// [1,2,3,4,5]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">2</span>)) <span class="comment">// [3,4,5]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">2</span>, <span class="number">4</span>)) <span class="comment">// [3,4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// -1表示复制到 ([1, 2, 3, 4, 5].length - 1) 的位置去，这里指4</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">-1</span>)) <span class="comment">// [5]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">-2</span>,<span class="number">-1</span>)) <span class="comment">// [4]</span></span><br></pre></td></tr></table></figure>

<p>实际应用中，slice 就可以做很多事情啦，比如说，我们的数组切割或者生成二维数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回一个根据subArrayNum的二维数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> </span>arr =&gt; 一维数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>subArrayNum =&gt; 每组元素的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> chunk = <span class="function">(<span class="params">arr, subArrayNum</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i += subArrayNum) &#123;</span><br><span class="line">        result.push(arr.slice(i, i + subArrayNum));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(chunk([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="number">2</span>))  <span class="comment">// [[1,2], [3,4]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个数组切片， 从array数组的起始元素开始提取n个元素。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> </span>arr =&gt; 要检索的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>n =&gt; 要提取的元素个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> take = <span class="function">(<span class="params">arr, n</span>) =&gt;</span> arr.slice(<span class="number">0</span>, n ? n : <span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(take([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="number">2</span>)) <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure>


<h2 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h2><p>splice()方法通过删除现有元素和/或添加新元素来修改数组,并以数组返回原数组中被修改的内容。此方法<b>会更改现有数组</b>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Array.splice(start,deleteCount,itemN)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>start =&gt; 指定修改的开始位置（从0计数）。如果超出了数组的长度，则从数组末尾开始添加内容；如果是负值，则表示从数组末位开始的第几位（从-1计数）；如果负数的绝对值大于数组的长度，则表示开始位置为第0位。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Int&#125;</span> </span>deleteCount  =&gt; 整数，表示要移除的数组元素的个数。如果deleteCount被省略，则其相当于(arr.length - start)。（可选） </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>itemN  =&gt; 要添加进数组的元素,从start 位置开始。如果不指定，则 splice() 将只删除数组元素。（可选）</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> </span>由被删除的元素组成的一个数组。如果只删除了一个元素，则返回只包含一个元素的数组。如果没有删除元素，则返回空数组。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> res = arr.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1,2,3]</span></span><br><span class="line"><span class="built_in">console</span>.log(res) <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = arr.splice(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1,2]</span></span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">// [3]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// -1表示复制到 ([1,2].length - 1) 的位置去，这里指1</span></span><br><span class="line">arr.splice(<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 只有一个参数时 fruits.splice(2) 相当于 fruits.splice(2,fruits.length-1)</span></span><br><span class="line"><span class="keyword">const</span> fruits = [<span class="string">'apple'</span>,<span class="string">'banana'</span>,<span class="string">'orange'</span>,<span class="string">'pear'</span>]</span><br><span class="line"><span class="keyword">const</span> res1 = fruits.splice(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(fruits) <span class="comment">// ["apple", "banana"]</span></span><br><span class="line"><span class="built_in">console</span>.log(res1) <span class="comment">// ["orange", "pear"]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>因为 js 中只有 splice 这个方法删除数组元素，并且会修改数组长度，所以他的实际应用场景还挺多的0 0，但是我没有太好的例子可以距离</p>
</blockquote>
<h2 id="push"><a href="#push" class="headerlink" title="push"></a>push</h2><p>push() 方法将一个或多个元素添加到数组的末尾，并返回该数组的新长度。 此方法<b>会更改现有数组</b>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Array.push(elementN)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>elementN =&gt; 被添加到数组末尾的元素。</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>当调用该方法时，新的 length 属性值将被返回。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.push(<span class="number">4</span>)) <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1,2,3,4]</span></span><br></pre></td></tr></table></figure>

<p>push、pop、shift、unshift 方法有意具有通用性。该方法和 call() 或 apply() 一起使用时，可应用在类似数组的对象上。这个比较有意义，所以单独在这里送上<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/push#%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84" target="_blank" rel="noopener">MDN的链接</a>，当然例子也是MDN的O(∩_∩)O</p>
<blockquote>
<p>像数组一样使用对象这个例子 push、pop、shift、unshift 四个方法写法很类似，这里就重复写了</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 合并两个数组</span></span><br><span class="line"><span class="keyword">var</span> vegetables = [<span class="string">'parsnip'</span>, <span class="string">'potato'</span>]</span><br><span class="line"><span class="keyword">var</span> moreVegs = [<span class="string">'celery'</span>, <span class="string">'beetroot'</span>]</span><br><span class="line"><span class="comment">// 将第二个数组融合进第一个数组</span></span><br><span class="line"><span class="comment">// 相当于 vegetables.push('celery', 'beetroot')</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.push.apply(vegetables, moreVegs)</span><br><span class="line"><span class="built_in">console</span>.log(vegetables)  <span class="comment">// ['parsnip', 'potato', 'celery', 'beetroot']</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 像数组一样使用对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    length: <span class="number">0</span>,</span><br><span class="line">    addElem: <span class="function"><span class="keyword">function</span> <span class="title">addElem</span> (<span class="params">elem</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// obj.length is automatically incremented </span></span><br><span class="line">        <span class="comment">// every time an element is added.</span></span><br><span class="line">        [].push.call(<span class="keyword">this</span>, elem);</span><br><span class="line">    &#125;,</span><br><span class="line">    popElem: <span class="function"><span class="keyword">function</span> <span class="title">addElem</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// obj.length is automatically incremented </span></span><br><span class="line">        <span class="comment">// every time an element is added.</span></span><br><span class="line">        <span class="keyword">return</span> [].pop.call(<span class="keyword">this</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.addElem(&#123;&#125;)</span><br><span class="line">obj.addElem(&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(obj.length) <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.popElem()) <span class="comment">// &#123;a: 1&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.length) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h2 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h2><p>pop()方法从数组中删除最后一个元素，并返回该元素的值。此方法更改数组的长度。此方法<b>会更改现有数组</b>。</p>
<blockquote>
<p>如果你在一个空数组上调用 pop()，它返回  undefined。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Array.pop()</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>从数组中删除的元素(当数组为空时返回undefined)。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.pop()) <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1,2]</span></span><br></pre></td></tr></table></figure>

<h2 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h2><p>shift() 方法从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。此方法<b>会更改现有数组</b>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Array.shift()</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>从数组中删除的元素(当数组为空时返回undefined)。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.shift()) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [2,3]</span></span><br></pre></td></tr></table></figure>

<h2 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h2><p>unshift() 方法将一个或多个元素添加到数组的开头，并返回该数组的新长度。此方法<b>会更改现有数组</b>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Array.unshift(elementN)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>elementN =&gt; 要添加到数组开头的元素。</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>当一个对象调用该方法时，返回其 length 属性值。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.unshift(<span class="number">1</span>,<span class="number">2</span>)) <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>但实际上，我们不建议用 unshift 方法往前面添加元素，为什么呢？从原理就可以知道，unshift()的效率是较低的。原因是，它每添加一个元素，都要把现有元素往下移一个位置。</p>
</blockquote>
<p>下面我们简单测试一下，unshift 和 push 的性能区别</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">'unshift所用时间'</span>)</span><br><span class="line"><span class="keyword">const</span> unshift = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123; 　　</span><br><span class="line">  unshift.unshift(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'unshift所用时间'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'push所用时间'</span>)</span><br><span class="line"><span class="keyword">const</span> push = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123; 　　</span><br><span class="line">  push.push(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'push所用时间'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'reverse所用时间'</span>)</span><br><span class="line">push.reverse(); </span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'reverse所用时间'</span>)</span><br></pre></td></tr></table></figure>

<p>大家可是复制一下这段代码，在我们数据量不是特别大的时候，他们的效率差别几十倍，因此，平时还是要慎用unshift()，特别是对大数组。此方法<b>会更改现有数组</b>。</p>
<p>但是我们可以通过 reverse 和 push 的方法实现我们 unshift ，比如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.unshift(<span class="number">1</span>,<span class="number">2</span>)) <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1,2,3,4,5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="comment">// 从前一个代码知道reverse的性能也很快</span></span><br><span class="line">arr2.reverse().push(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">arr2.reverse()</span><br><span class="line"><span class="built_in">console</span>.log(arr2) <span class="comment">// [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>

<h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><p>sort() 方法用原地算法对数组的元素进行排序，并返回数组。排序算法现在是稳定的。默认排序顺序是根据字符串Unicode码点。此方法<b>会更改现有数组</b>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Array.sort(compareFunction)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>compareFunction =&gt; 用来指定按某种顺序进行排列的函数。如果省略，元素按照转换为的字符串的各个字符的Unicode位点进行排序。(可选)</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> </span>排序后的数组。请注意，数组已原地排序，并且不进行复制。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> months = [<span class="string">'March'</span>, <span class="string">'Jan'</span>, <span class="string">'Feb'</span>, <span class="string">'Dec'</span>];</span><br><span class="line">months.sort() </span><br><span class="line"><span class="built_in">console</span>.log(months) <span class="comment">// ["Dec", "Feb", "Jan", "March"]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果没有指明 compareFunction ，那么元素会按照转换为的字符串的诸个字符的Unicode位点进行排序。例如 “Banana” 会被排列到 “cherry” 之前。当数字按由小到大排序时，9 出现在 80 之前，但因为（没有指明 compareFunction），比较的数字会先被转换为字符串，所以在Unicode顺序上 “80” 要比 “9” 要靠前。</p>
</blockquote>
<p>所以我们怎么解决这个问题了，当然要使用我们的比较函数啦，而且通过我们的比较函数，可以实现很多我们需要的效果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">"1"</span>,<span class="number">2</span>,<span class="string">"11"</span>,<span class="number">3</span>,<span class="string">"21"</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.sort()) <span class="comment">// ["1", "11", 2, "21", 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过比较函数解决该问题</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b)) <span class="comment">// ["1", 2, 3, "11", "21"]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 再比如，我们可以通过比较函数实现对数组对象的排序</span></span><br><span class="line"><span class="keyword">const</span> people = [&#123;<span class="attr">name</span>:<span class="string">'gating'</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">'family'</span>,<span class="attr">age</span>:<span class="number">16</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">'blue'</span>,<span class="attr">age</span>:<span class="number">21</span>&#125;]</span><br><span class="line">people.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a.age - b.age) <span class="comment">// [&#123;name:'family',age:16&#125;,&#123;name:'gating',age:18&#125;,&#123;name:'blue',age:21&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当然，通过 sort + Math.random 可以很巧妙的实现数组洗牌（数组乱序）的算法（当然，这个也是不推荐的，不过他可以用在小项目中，当作一个小技巧）</span></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">numbers.sort(<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">Math</span>.random()<span class="number">-0.5</span>) <span class="comment">// 多尝试几次，看看每次出来的结果是不是不一样的</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>关于数组乱序，正确的解法应该是 Fisher–Yates Shuffle，复杂度 O(n)。其实它的思想非常的简单，遍历数组元素，将其与之前的任意元素交换。因为遍历有从前向后和从后往前两种方式，所以该算法大致也有两个版本的实现。</p>
</blockquote>
<p>这里送上两个方法，具体的请参考文末的数组乱序文章</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从后往前的版本</span></span><br><span class="line"><span class="keyword">const</span> shuffle = <span class="function">(<span class="params">array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> _array = array.concat();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = _array.length; i--;) &#123;</span><br><span class="line">        <span class="keyword">var</span> j = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (i + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">var</span> temp = _array[i];</span><br><span class="line">        _array[i] = _array[j];</span><br><span class="line">        _array[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 从前往后的版本</span></span><br><span class="line"><span class="keyword">const</span> shuffle =  <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> length = a.length;</span><br><span class="line">    <span class="keyword">var</span> shuffled = <span class="built_in">Array</span>(length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>, rand; index &lt; length; index++) &#123;</span><br><span class="line">        rand = ~~(<span class="built_in">Math</span>.random() * (index + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (rand !== index)</span><br><span class="line">            shuffled[index] = shuffled[rand];</span><br><span class="line">        shuffled[rand] = a[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> shuffled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><p>reverse() 方法将数组中元素的位置颠倒。第一个数组元素成为最后一个数组元素，最后一个数组元素成为第一个。此方法<b>会更改现有数组</b>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Array.reverse(compareFunction)</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> </span>颠倒后的数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> months = [<span class="string">'March'</span>, <span class="string">'Jan'</span>, <span class="string">'Feb'</span>, <span class="string">'Dec'</span>];</span><br><span class="line">months.reverse() </span><br><span class="line"><span class="built_in">console</span>.log(months) <span class="comment">// ["Dec", "Feb", "Jan", "March"]</span></span><br></pre></td></tr></table></figure>

<h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><p>join() 方法将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。此方法<b>不会更改原数组</b>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Array.reverse(separator)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>如果需要(separator)，将分隔符转换为字符串。如果省略()，数组元素用逗号分隔。默认为 ","。</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>一个所有数组元素连接的字符串。如果 arr.length 为0，则返回空字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.join()) <span class="comment">// 1,2,3</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.join(<span class="string">'-'</span>)) <span class="comment">// 1-2-3</span></span><br></pre></td></tr></table></figure>


<h1 id="迭代-循环遍历-相关"><a href="#迭代-循环遍历-相关" class="headerlink" title="迭代(循环遍历)相关"></a>迭代(循环遍历)相关</h1><h2 id="every"><a href="#every" class="headerlink" title="every"></a>every</h2><p>every() 方法测试数组的所有元素是否都通过了指定函数的测试。此方法<b>不会更改原数组</b>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * arr.every(callback,thisArg)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Function&#125;</span> </span>callback =&gt; 用来测试每个元素的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>thisArg =&gt; 可选参数，执行回调函数 mapFn 时 this 对象。 (可选)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * callback 被调用时会传入三个参数：当前元素值，元素的索引，原数组。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Boolean&#125;</span> </span>为true时，所有元素是否都通过了指定函数的测试，否则就是没有通过</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">56</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.every(<span class="function"><span class="params">item</span>=&gt;</span>item&lt;<span class="number">10</span>)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h2 id="some"><a href="#some" class="headerlink" title="some"></a>some</h2><p>some() 方法测试数组中的某些元素是否通过由提供的函数实现的测试。此方法<b>不会更改原数组</b>。</p>
<p>some() 和 every() 的区别在于every是数组所有元素都需要通过测试才返回true，而some只需要有一个通过测试就返回true</p>
<blockquote>
<p>对于放在空数组上的任何条件，此方法返回false。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * arr.some(callback,thisArg)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Function&#125;</span> </span>callback =&gt; 用来测试每个元素的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>thisArg =&gt; 可选参数，执行回调函数 mapFn 时 this 对象。 (可选)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * callback 被调用时会传入三个参数：当前元素值，元素的索引，原数组。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Boolean&#125;</span> </span>为true时，有其中一个或多个元素是否都通过了指定函数的测试，否则就是没有通过</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">56</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.some(<span class="function"><span class="params">item</span>=&gt;</span>item&lt;<span class="number">10</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>实际的应用场景，可以实现类似于 includes 的功能 （这里或许你会问，为啥实现类似 includes 的功能，直接用不就好了吗？</p>
<p>因为 includes 的兼容性太差了，IE是不兼容的，但是 some 在IE9下却可以使用，所以，你懂的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'mango'</span>, <span class="string">'guava'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAvailability</span>(<span class="params">arr, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.some(<span class="function"><span class="params">arrVal</span> =&gt;</span> val === arrVal);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">checkAvailability(fruits, <span class="string">'kela'</span>);   <span class="comment">// false</span></span><br><span class="line">checkAvailability(fruits, <span class="string">'banana'</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>


<h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><p>forEach() 方法对数组的每个元素执行一次提供的函数。</p>
<p>for 和 forEach 的区别，forEach中已删除或者未初始化的项将被跳过（例如在稀疏数组上），而 for 不会</p>
<blockquote>
<p>注意： 没有办法中止或者跳出 forEach 循环，除了抛出一个异常。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * arr.forEach(callback,thisArg)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Function&#125;</span> </span>callback =&gt; 用来测试每个元素的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>thisArg =&gt; 可选参数，执行回调函数 mapFn 时 this 对象。 (可选)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * callback 被调用时会传入三个参数：当前元素值，元素的索引，原数组。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;undefined&#125;</span> <span class="variable">undefined</span></span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr1.forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item) <span class="comment">// 1 2 3</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// for 和 forEach 的区别</span></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; arr2.length; index++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr2[index]) <span class="comment">// 1 2 undefined 4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arr2.forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item) <span class="comment">// 1 2 4</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>实际的应用场景，我们可以通过 forEach 实现对对象的复制，当然，这只是对象复制的其中一种方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> copy = <span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> copy = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.getPrototypeOf(obj))</span><br><span class="line">  <span class="keyword">const</span> propNames = <span class="built_in">Object</span>.getOwnPropertyNames(obj)</span><br><span class="line">  propNames.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> desc = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, name);</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(copy, name, desc);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;<span class="attr">name</span>:<span class="string">'gating'</span>&#125;</span><br><span class="line"><span class="keyword">const</span> obj2 = copy(obj1)</span><br><span class="line"><span class="built_in">console</span>.log(obj2) <span class="comment">// &#123;name:'gating'&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。此方法<b>不会更改原数组</b>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * arr.map(callback,thisArg)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Function&#125;</span> </span>callback =&gt; 用来测试每个元素的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>thisArg =&gt; 可选参数，执行回调函数 mapFn 时 this 对象。 (可选)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * callback 被调用时会传入三个参数：当前元素值，元素的索引，原数组。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> </span>一个新数组，每个元素都是回调函数的结果。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.map(<span class="function"><span class="params">item</span>=&gt;</span>item*<span class="number">2</span>)) <span class="comment">// [2,4,6]</span></span><br></pre></td></tr></table></figure>

<p>map 的应用场景很多，比如我想给数组增加一个id的属性，再比如可以重新格式化我们的数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [&#123;<span class="attr">name</span>:<span class="string">'gating'</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">'family'</span>&#125;]</span><br><span class="line"><span class="keyword">const</span> res = arr.map(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">  item.id = index</span><br><span class="line">  <span class="keyword">return</span> item</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(res) <span class="comment">// [&#123;name:'gating',id:0&#125;,&#123;name:'family',id:1&#125;]</span></span><br></pre></td></tr></table></figure>

<h3 id="由一条面试题引发的思考"><a href="#由一条面试题引发的思考" class="headerlink" title="由一条面试题引发的思考"></a>由一条面试题引发的思考</h3><p>通常情况下，map 方法中的 callback 函数只需要接受一个参数，就是正在被遍历的数组元素本身。但这并不意味着 map 只给 callback 传了一个参数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面的语句返回什么呢:</span></span><br><span class="line">[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>].map(<span class="built_in">parseInt</span>);</span><br><span class="line"><span class="comment">// 你可能觉的会是[1, 2, 3]</span></span><br><span class="line"><span class="comment">// 但实际的结果是 [1, NaN, NaN]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通常使用parseInt时,只需要传递一个参数.</span></span><br><span class="line"><span class="comment">// 但实际上,parseInt可以有两个参数.第二个参数是进制数.</span></span><br><span class="line"><span class="comment">// 可以通过语句"alert(parseInt.length)===2"来验证.</span></span><br><span class="line"><span class="comment">// map方法在调用callback函数时,会给它传递三个参数:当前正在遍历的元素, </span></span><br><span class="line"><span class="comment">// 元素索引, 原数组本身.</span></span><br><span class="line"><span class="comment">// 第三个参数parseInt会忽视, 但第二个参数不会,也就是说,</span></span><br><span class="line"><span class="comment">// parseInt把传过来的索引值当成进制数来使用.从而返回了NaN.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnInt</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(element, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>].map(returnInt); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="comment">// 意料之中的结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以使用简单的箭头函数，结果同上</span></span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>].map( <span class="function"><span class="params">str</span> =&gt;</span> <span class="built_in">parseInt</span>(str) );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个更简单的方式:</span></span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>].map(<span class="built_in">Number</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="comment">// 与`parseInt` 不同，下面的结果会返回浮点数或指数:</span></span><br><span class="line">[<span class="string">'1.1'</span>, <span class="string">'2.2e2'</span>, <span class="string">'3e300'</span>].map(<span class="built_in">Number</span>); <span class="comment">// [1.1, 220, 3e+300]</span></span><br></pre></td></tr></table></figure>

<h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>filter() 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。此方法<b>不会更改原数组</b>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * arr.filter(callback,thisArg)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Function&#125;</span> </span>callback =&gt; 用来测试每个元素的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>thisArg =&gt; 可选参数，执行回调函数 mapFn 时 this 对象。 (可选)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * callback 被调用时会传入三个参数：当前元素值，元素的索引，原数组。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> </span>过滤后的数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> arr = [&#123;<span class="attr">sex</span>:<span class="string">'male'</span>,<span class="attr">name</span>:<span class="string">'gating'</span>&#125;,&#123;<span class="attr">sex</span>:<span class="string">'female'</span>,<span class="attr">name</span>:<span class="string">'blue'</span>&#125;,&#123;<span class="attr">sex</span>:<span class="string">'male'</span>,<span class="attr">name</span>:<span class="string">'family'</span>&#125;]</span><br><span class="line"><span class="comment">// 过滤掉性别为 male 的人</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.filter(<span class="function"><span class="params">item</span>=&gt;</span>item.sex===<span class="string">'female'</span>))</span><br></pre></td></tr></table></figure>

<p>实际的应用场景，通过可以 filter 过滤掉我们不需要的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> delListRep = <span class="function">(<span class="params">arr, key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> keys = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        keys.push(arr[i][key])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr.filter(<span class="function">(<span class="params">ele, i, arr</span>) =&gt;</span> keys.indexOf(ele[key]) == i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr = [&#123;<span class="attr">sex</span>:<span class="string">'male'</span>,<span class="attr">name</span>:<span class="string">'gating'</span>&#125;,&#123;<span class="attr">sex</span>:<span class="string">'female'</span>,<span class="attr">name</span>:<span class="string">'blue'</span>&#125;,&#123;<span class="attr">sex</span>:<span class="string">'male'</span>,<span class="attr">name</span>:<span class="string">'gating'</span>&#125;]</span><br><span class="line"><span class="built_in">console</span>.log(delListRep(arr,<span class="string">'sex'</span>)) <span class="comment">//  [&#123;sex:'male',name:'gating'&#125;,&#123;sex:'female',name:'blue'&#125;]</span></span><br></pre></td></tr></table></figure>

<h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><p>reduce() 方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。<b>不会更改原数组</b>。</p>
<blockquote>
<p>如果没有提供initialValue，reduce 会从索引1的地方开始执行 callback 方法，跳过第一个索引。如果提供initialValue，从索引0开始。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * arr.filter(callback,initialValue)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Function&#125;</span> </span>callback =&gt; 执行数组中每个值的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>initialValue =&gt; 作为第一次调用 callback函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。 (可选)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * callback 被调用时会传入三个参数：accumulator，currentValue，currentIndex，array</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * accumulator =&gt; 累计器累计回调的返回值; 它是上一次调用回调时返回的累积值，或initialValue（见于下方）。</span></span><br><span class="line"><span class="comment"> * currentValue =&gt; 数组中正在处理的元素。</span></span><br><span class="line"><span class="comment"> * currentIndex =&gt; 数组中正在处理的当前元素的索引。 如果提供了initialValue，则起始索引号为0，否则为1。 (可选)</span></span><br><span class="line"><span class="comment"> * array =&gt; 调用reduce()的数组。 (可选)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>函数累计处理的结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> reducer = arr.reduce(<span class="function">(<span class="params">accumulator, currentValue</span>) =&gt;</span> accumulator + currentValue)</span><br><span class="line"><span class="built_in">console</span>.log(reducer) <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = arr.reduce(<span class="function">(<span class="params">accumulator, currentValue</span>) =&gt;</span> accumulator + currentValue,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">console</span>.log(res) <span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// initialValue 有值 和 没有值的区别</span></span><br><span class="line"><span class="comment">// 因为 reduce 里，如果没有提供初始值，那么 accumulator 会默认使用数组的第一个元素，因为取了数组的第一个元素了，那么下标当然没有必要再从0开始了</span></span><br><span class="line">arr.reduce(<span class="function">(<span class="params">accumulator, currentValue, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index) <span class="comment">// 0 1 2 3</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">arr.reduce(<span class="function">(<span class="params">accumulator, currentValue, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index) <span class="comment">// 1 2 3</span></span><br><span class="line">&#125;,<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p>看到了 reduce 的用法，实际上也可以想到，reduce 的参数这么丰富，是不是可以做很多我们想要的事，我想说，是的，在实际应用中，reduce 能做到的事，比我们想象中的还要多</p>
<p>比如，数组扁平化、数组去重、统计数组中每个元素出现的次数、根据属性对Object分类等等等等这种很cool的事，接下来，我们就一一用 reduce 实现吧</p>
<blockquote>
<p>reduce 很重要，请务必掌握这个方法 ps：字符串的 replace 也很重要哦！！！也要掌握</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据所提供的字符分组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> </span>arr =&gt; 数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>key =&gt; 需要分组的字段 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">groupBy</span>(<span class="params">arr, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">newObj, obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!newObj[obj[key]]) &#123;</span><br><span class="line">            newObj[obj[key]] = [];</span><br><span class="line">            newObj[obj[key]].push(obj);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newObj[obj[key]].push(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newObj;</span><br><span class="line">    &#125;, &#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> people = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'gating'</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'family'</span>, <span class="attr">age</span>: <span class="number">16</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'blue'</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> groupedPeople = groupBy(people, <span class="string">'age'</span>) <span class="comment">// &#123;16: Array(1), 18: Array(1), 20: Array(1)&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 统计数组中每个元素出现的次数 Object同理</span></span><br><span class="line"><span class="comment">// 这里用 Map 是为了避免 数字1 和 字符串1 同名键值导致的bug</span></span><br><span class="line"><span class="keyword">const</span> names = [<span class="string">'gating'</span>, <span class="string">'family'</span>, <span class="string">'gating'</span>, <span class="string">'blue'</span>, <span class="string">'family'</span>]</span><br><span class="line"><span class="keyword">const</span> countNum1 = <span class="function">(<span class="params">arr</span>) =&gt;</span> arr.reduce(<span class="function">(<span class="params">m, x</span>)=&gt;</span> m.set(x, (m.get(x) || <span class="number">0</span>) + <span class="number">1</span>), <span class="keyword">new</span> <span class="built_in">Map</span>())</span><br><span class="line"><span class="keyword">const</span> allName = countNum1(names) <span class="comment">// &#123;"gating" =&gt; 2, "family" =&gt; 2, "blue" =&gt; 1&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组去重</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> result = arr.sort().reduce(<span class="function">(<span class="params">init, current</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(init.length===<span class="number">0</span> || init[init.length<span class="number">-1</span>]!==current)&#123;</span><br><span class="line">        init.push(current);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> init;</span><br><span class="line">&#125;, []);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//[1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>

<p>其实 reduce 还可以做很多更牛逼的事，看到这里，你是不是也想用 reduce 做更多强大的事呢？那就赶紧把 reduce 学会</p>
<h2 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight"></a>reduceRight</h2><p>reduceRight() 方法接受一个函数作为累加器（accumulator）和数组的每个值（从右到左）将其减少为单个值。<b>不会更改原数组</b>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * arr.filter(callback,initialValue)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Function&#125;</span> </span>callback =&gt; 执行数组中每个值的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>initialValue =&gt; 作为第一次调用 callback函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。 (可选)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * callback 被调用时会传入三个参数：accumulator，currentValue，currentIndex，array</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * accumulator =&gt; 累计器累计回调的返回值; 它是上一次调用回调时返回的累积值，或initialValue（见于下方）。</span></span><br><span class="line"><span class="comment"> * currentValue =&gt; 数组中正在处理的元素。</span></span><br><span class="line"><span class="comment"> * currentIndex =&gt; 数组中正在处理的当前元素的索引。 如果提供了initialValue，则起始索引号为0，否则为1。 (可选)</span></span><br><span class="line"><span class="comment"> * array =&gt; 调用reduce()的数组。 (可选)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>函数累计处理的结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduceRight(</span><br><span class="line">  (accumulator, currentValue) =&gt; accumulator.concat(currentValue)</span><br><span class="line">)</span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [4, 5, 2, 3, 0, 1]</span></span><br></pre></td></tr></table></figure>

<p>reduce 与 reduceRight 之间的区别</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>]; </span><br><span class="line"><span class="keyword">const</span> left  = arr.reduce(<span class="function">(<span class="params">prev, cur</span>)=&gt;</span>prev + cur); </span><br><span class="line"><span class="keyword">const</span> right = arr.reduce(<span class="function">(<span class="params">prev, cur</span>)=&gt;</span>prev + cur); </span><br><span class="line"><span class="built_in">console</span>.log(left);  <span class="comment">// "12345"</span></span><br><span class="line"><span class="built_in">console</span>.log(right); <span class="comment">// "54321"</span></span><br></pre></td></tr></table></figure>

<p>由于 reduceRight 和 reduce 区别不是很大，这里的例子就参考 reduce 就行了</p>
<h1 id="迭代相关-生成一个迭代器"><a href="#迭代相关-生成一个迭代器" class="headerlink" title="迭代相关(生成一个迭代器)"></a>迭代相关(生成一个迭代器)</h1><p>暂时没有太多的应用场景，不详细讲解</p>
<h2 id="entries"><a href="#entries" class="headerlink" title="entries"></a>entries</h2><p>entries() 方法返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * arr.entries()</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Iterator&#125;</span> </span>一个新的 Array 迭代器对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> iterator1 = arr1.entries();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代器通用的两种迭代方式（entries、keys、value同样）</span></span><br><span class="line"><span class="comment">// 1. for of 循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> number <span class="keyword">of</span> iterator1) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(number) <span class="comment">// [0, 1] ， [1, 2] ， [2, 3] 输出三次</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> iterator2 = arr2.entries();</span><br><span class="line"><span class="built_in">console</span>.log(iterator2.next().value); <span class="comment">// [0, 1]</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator2.next().value); <span class="comment">// [1, 2]</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator2.next().value); <span class="comment">// [2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator2.next().value); <span class="comment">// undefined，并且 iterator2.next().done 变成true</span></span><br></pre></td></tr></table></figure>

<h2 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h2><p>keys() 方法返回一个包含数组中每个索引键的Array Iterator对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * arr.keys()</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Iterator&#125;</span> </span>一个新的 Array 迭代器对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line"><span class="keyword">const</span> iterator = arr.keys();</span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> iterator) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key); <span class="comment">//  0 1 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="values"><a href="#values" class="headerlink" title="values"></a>values</h2><p>values() 方法返回一个新的 Array Iterator 对象，该对象包含数组每个索引的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * arr.values()</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Iterator&#125;</span> </span>一个新的 Array 迭代器对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line"><span class="keyword">const</span> iterator = arr.values()</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> iterator) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key) <span class="comment">// 'a' 'b' 'c'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="不知名的两个方法"><a href="#不知名的两个方法" class="headerlink" title="不知名的两个方法"></a>不知名的两个方法</h1><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h2><p>toString() 返回一个字符串，表示指定的数组及其元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * arr.toString()</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>一个表示指定的数组及其元素的字符串。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.toString()) <span class="comment">// 'a','b','c'</span></span><br></pre></td></tr></table></figure>

<h2 id="toLocaleString-NaN"><a href="#toLocaleString-NaN" class="headerlink" title="toLocaleString"></a>toLocaleString</h2><p>toLocaleString() 返回一个字符串表示数组中的元素。数组中的元素将使用各自的 toLocaleString 方法转成字符串，这些字符串将使用一个特定语言环境的字符串（例如一个逗号 “,”）隔开。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * arr.toLocaleString(locales,options)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String?&#125;</span>  </span>locales =&gt; 带有BCP 47语言标记的字符串或字符串数组，关于locales参数的形式与解释，请看Intl页面。(可选)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span>  </span>options =&gt; 一个可配置属性的对象，对于数字 Number.prototype.toLocaleString()，对于日期Date.prototype.toLocaleString() (可选)</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>表示数组元素的字符串</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> array1 = [<span class="number">1</span>, <span class="string">'a'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'21 Dec 1997 14:12:00 UTC'</span>)]</span><br><span class="line"><span class="keyword">var</span> localeString = array1.toLocaleString(<span class="string">'en'</span>, &#123;<span class="attr">timeZone</span>: <span class="string">"UTC"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(localeString) <span class="comment">// 1,a,12/21/1997, 2:12:00 PM</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> prices = [<span class="string">'￥7'</span>, <span class="number">500</span>, <span class="number">8123</span>, <span class="number">12</span>] </span><br><span class="line">prices.toLocaleString(<span class="string">'ja-JP'</span>, &#123; <span class="attr">style</span>: <span class="string">'currency'</span>, <span class="attr">currency</span>: <span class="string">'JPY'</span> &#125;) <span class="comment">// "￥7,￥500,￥8,123,￥12"</span></span><br></pre></td></tr></table></figure>

<p>这个方法我用的真不多，所以这里还是直接放上<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString" target="_blank" rel="noopener">MDN的地址</a>供大家了解，或许以后就用到了呢？</p>
<h1 id="扁平化数组"><a href="#扁平化数组" class="headerlink" title="扁平化数组"></a>扁平化数组</h1><p>本来这个我写这篇博客的时候，看到<code>MDN</code>写着<code>這是一個實驗中的功能</code>,所以我就没有记录下来，不过最近再看一眼，发现那个<code>waring</code>已经去掉了，所以就写一下这两个方法</p>
<h2 id="flat"><a href="#flat" class="headerlink" title="flat"></a>flat</h2><p>flat() 方法返回一个包含将数组与子数组中所有元素的新数组。<strong>不会更改原数组</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * arr.flat([depth])</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;depth&#125;</span>  </span>depth =&gt; 指定要提取嵌套数组的结构深度，默认值为 1。返回值(可选)</span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> </span>一个包含将数组与子数组中所有元素的新数组。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,[<span class="number">2</span>],<span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr1.flat()) <span class="comment">// [1,2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>,[<span class="number">2</span>,[<span class="number">3</span>]]]</span><br><span class="line"><span class="built_in">console</span>.log(arr2.flat()) <span class="comment">// [1,2,[3]]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2.flat(<span class="number">2</span>)) <span class="comment">// [1,2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Infinity，可展开任意深度的嵌套数组</span></span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>, [<span class="number">7</span>, <span class="number">8</span>, [<span class="number">9</span>, <span class="number">10</span>]]]]]</span><br><span class="line"><span class="built_in">console</span>.log(arr3.flat(<span class="literal">Infinity</span>)) <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此外，flat还会扁平化数组空项</span></span><br><span class="line"><span class="keyword">var</span> arr4 = [<span class="number">1</span>, <span class="number">2</span>, , <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr3.flat()) <span class="comment">// [1, 2, 4, 5]</span></span><br></pre></td></tr></table></figure>

<p>看到这里，你也许会发现，这个不就是我们上边通过<code>reduce</code>实现的扁平化方法吗？没错，es6之后默认给我们自带了这个方法（👍）</p>
<h2 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h2><p>顾名思义啦，从名字我们就可以知道，这个方法就是即执行 <code>map</code> 又执行 <code>flat</code>,对此官方的说法是，首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。它与 <code>map</code> 连着深度值为1的 <code>flat</code> 几乎相同，但 flatMap 通常在合并成一种方法的效率稍微高一些。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * arr.flatMap(callback,thisArg)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Function&#125;</span> </span>callback =&gt; 用来测试每个元素的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>thisArg =&gt; 可选参数，执行回调函数 mapFn 时 this 对象。 (可选)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * callback 被调用时会传入三个参数：当前元素值，元素的索引，原数组。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> </span>一个新数组，每个元素都是回调函数的结果,并且结构深度 depth 值为1。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.flatMap(<span class="function"><span class="params">x</span>=&gt;</span>[x*<span class="number">2</span>])) <span class="comment">// [2,4,6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其实就是相当于，先执行 map 在执行 flat</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.map(<span class="function"><span class="params">x</span>=&gt;</span>[x*<span class="number">2</span>]).flat())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但其实还有更有意思的,众所周知我们都知道 map 会返回输入数组一样长度的数组</span></span><br><span class="line"><span class="comment">// 而 flatMap 不是，因为他拥有了 flat</span></span><br><span class="line"><span class="comment">// 假设我们有个场景，我想通过 flatMap 过滤掉年龄大于50岁的人</span></span><br><span class="line"><span class="keyword">var</span> people = [&#123;<span class="attr">name</span>:<span class="string">"gating"</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">"family"</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">"blue"</span>,<span class="attr">age</span>:<span class="number">60</span>&#125;]</span><br><span class="line"><span class="built_in">console</span>.log(people.flatMap(<span class="function"><span class="params">i</span>=&gt;</span>i.age&gt;=<span class="number">60</span>?[]:[i])) <span class="comment">// [&#123;name:"gating",age:18&#125;,&#123;name:"family",age:20&#125;]</span></span><br></pre></td></tr></table></figure>

<p>通过过滤那个例子，我们就可以看出, 输出的列表长度可以不同于输入的列表长度。这也许也是 <code>flatMap</code> 可玩之处（🤤）</p>
<h1 id="文中某些知识点参考链接"><a href="#文中某些知识点参考链接" class="headerlink" title="文中某些知识点参考链接"></a>文中某些知识点参考链接</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#Redefining_the_length_property_of_an_Array_object" target="_blank" rel="noopener">重定义数组对象的 length 属性</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener">MDN地址,文中很多例子都采用于MDN，推荐</a></p>
<p><a href="https://github.com/lifesinger/blog/issues/175" target="_blank" rel="noopener">数组类型判断，玉伯大佬博客，推荐</a></p>
<p><a href="https://github.com/hanzichi/underscore-analysis/issues/15" target="_blank" rel="noopener">JavaScript 数组乱序</a></p>
<p><a href="https://www.h5jun.com/post/array-shuffle.html" target="_blank" rel="noopener">数组的完全随机排列</a></p>
<blockquote>
<p>鉴于 reduce 和 reduceRight 太过好用（太过牛逼），这里提供他们两个的MDN地址</p>
</blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="noopener">reduce</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight" target="_blank" rel="noopener">reduceRight</a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>针对于我们一开始关心的两个问题，我在这里做一个小小的总结</p>
<blockquote>
<p>ps: 对于测试性的方法，这里就不做展开了，因为用不上= =</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法名</th>
<th align="center">返回值</th>
<th align="center">是否修改原数组</th>
</tr>
</thead>
<tbody><tr>
<td align="center">concat</td>
<td align="center">返回合并后的 <code>Array</code> 实例</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center">copyWithin</td>
<td align="center">改变了的数组</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">entries</td>
<td align="center">一个新的 <code>Array</code> 迭代器对象( [key,value])</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center">every</td>
<td align="center">布尔值，表示数组中所有元素是否通过 every 测试</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center">fill</td>
<td align="center">修改后的数组</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">filter</td>
<td align="center">一个新的通过测试的元素的集合的数组，如果没有通过测试则返回空数组</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center">find</td>
<td align="center">当某个元素通过 <code>callback</code> 的测试时，返回数组中的一个值，否则返回 <code>undefined</code>。</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center">findIndex</td>
<td align="center">返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1。</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center">forEach</td>
<td align="center"><code>undefined</code></td>
<td align="center">否</td>
</tr>
<tr>
<td align="center">includes</td>
<td align="center">布尔值， 判断一个数组是否包含一个指定的值</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center">indexOf</td>
<td align="center">首个被找到的元素在数组中的索引位置; 若没有找到则返回 -1</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center">join</td>
<td align="center">一个所有数组元素连接的字符串。如果 <code>arr.length</code> 为0，则返回空字符串</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center">keys</td>
<td align="center">一个新的 <code>Array</code> 迭代器对象( [key])</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center">lastIndexOf</td>
<td align="center">数组中最后一个元素的索引，如未找到返回-1</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center">map</td>
<td align="center">一个新数组，每个元素都是回调函数的结果</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center">pop</td>
<td align="center">从数组中删除的元素(当数组为空时返回<code>undefined</code>)</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">push</td>
<td align="center">当调用该方法时，新的 <code>length</code> 属性值将被返回。</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">reduce</td>
<td align="center">函数累计处理的结果</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center">reduceRight</td>
<td align="center">执行之后的返回值</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center">reverse</td>
<td align="center">返回颠倒后的 <code>Array</code></td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">shift</td>
<td align="center">返回被删除元素的值</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">slice</td>
<td align="center">一个含有提取元素的新数组</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center">some</td>
<td align="center">布尔值，表示数组中至少有一个元素是否通过 every 测试</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center">sort</td>
<td align="center">排序后的数组</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">splice</td>
<td align="center">由被删除的元素组成的一个数组。如果只删除了一个元素，则返回只包含一个元素的数组。如果没有删除元素，则返回空数组</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">toLocaleString</td>
<td align="center">表示数组元素的字符串</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center">toString</td>
<td align="center">个表示指定的数组及其元素的字符串</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center">unshift</td>
<td align="center">返回其 <code>length</code>属性值</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">values</td>
<td align="center">一个新的 <code>Array</code> 迭代器对象( [value])</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center">flat</td>
<td align="center">一个包含将数组与子数组中所有元素的新数组</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center">flatMap</td>
<td align="center">一个新的数组，其中每个元素都是回调函数的结果，并且结构深度 depth 值为1</td>
<td align="center">否</td>
</tr>
</tbody></table>
<p>最后，感谢各位观众老爷观看啦O(∩_∩)O</p>
]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>从零搭建Window前端开发环境</title>
    <url>/2020/02/25/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAWindow%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作为一个小前端，是否因为搭建环境烦恼过，是否因为npm等国外镜像踩坑过，不要怕，接下来跟着我一步步搭建适合自己的开发环境吧！！！</p>
<h1 id="node"><a href="#node" class="headerlink" title="node"></a>node</h1><p>这个不用说了吧，我们经常和他打交道，无论是 <code>gulp</code>、<code>webpack</code>和<code>parcel</code>等打包工具，还是各种脚手架的工具，都离不开<code>node</code>环境的支持，接下来我就介绍一下我常用的一些工具和模块。</p>
<h2 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h2><p>管理<code>node</code>版本，通过<code>nvm</code>我们可以同时安装/切换不同的<code>node</code>版本</p>
<p>不过,<code>nvm</code>不支持<code>window</code>版本,但是有替代方案,就是<code>nvm-window</code>,具体为什么<code>nvm</code>为何不支持<code>windows</code>平台?这里就不做谈论了…</p>
<blockquote>
<p>ps: <a href="https://www.lanzous.com/i8prjed" target="_blank" rel="noopener">nvm-window下载链接</a>，如果网速快就不需要在这里下载了，<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">github下载链接</a>，建议下载<code>nvm-setup.zip</code>会帮你配置好环境变量</p>
</blockquote>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>如果没什么特别要求，无脑下一步即可</p>
<ol>
<li><p>如果之前已安装<code>node</code>,作者的建议是卸载原有的<code>node</code>版本,避免发生冲突</p>
</li>
<li><p>配置setting.txt文件,主要是配置为国内镜像源镜像源<br> 配置文件在：C:\Users\用户名\AppData\Roaming\nvm下（如果和我一下，无脑下一步的话）</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node_mirror: https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node&#x2F;</span><br><span class="line">npm_mirror: https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;npm&#x2F;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p>ps: 如果遇到<code>Powershell</code>下禁止执行脚本的问题,请用管理员打开<code>Powershell</code>执行<code>set-ExecutionPolicy RemoteSigned</code>，选择y即可</p>
</blockquote>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ol>
<li><p>可列出已安装的node版本 nvm list/nvm ls</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm ls</span><br></pre></td></tr></table></figure></li>
<li><p>安装指定版本的node nvm install <version> [arch]</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm install latest <span class="comment"># latest表示安装最新版</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>ps: arch为可选的平台架构项（32位/64位），，默认为系统平台对应的版本，若设置为all，则同时安装两个版本。</p>
</blockquote>
</li>
<li><p>卸载指定版本 nvm uninstall <version></p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm uninstall 13.6.0 <span class="comment"># latest表示安装最新版</span></span><br></pre></td></tr></table></figure></li>
<li><p>设置镜像源 nvm node_mirror <node_mirror_url></p>
<ul>
<li>设置<code>node</code>镜像源<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm node_mirror https://npm.taobao.org/mirrors/node/</span><br></pre></td></tr></table></figure>
<ul>
<li>设置<code>npm</code>镜像源<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm npm_mirror https://npm.taobao.org/mirrors/node/</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="nrm"><a href="#nrm" class="headerlink" title="nrm"></a>nrm</h2><p>众所周知的一点，<code>npm</code> 日常会挂掉，还时不时丢包，所以我们需要一款切换源的工具，来帮我们解决这个问题。</p>
<blockquote>
<p>ps: 虽然可以手动切换源，但是相对来讲还是比较麻烦的，所以推荐使用工具来帮我们完成这件事</p>
</blockquote>
<h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g nrm</span><br></pre></td></tr></table></figure>

<h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h3><ol>
<li><p>列出当前支持切换的源</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nrm ls</span><br><span class="line"></span><br><span class="line">* npm -------- https://registry.npmjs.org/</span><br><span class="line">yarn ------- https://registry.yarnpkg.com/</span><br><span class="line">cnpm ------- http://r.cnpmjs.org/</span><br><span class="line">taobao ----- https://registry.npm.taobao.org/</span><br><span class="line">nj --------- https://registry.nodejitsu.com/</span><br><span class="line">npmMirror -- https://skimdb.npmjs.com/registry/</span><br><span class="line">edunpm ----- http://registry.enpmjs.org/</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用taobao源作为默认的npm源</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nrm use taobao</span><br><span class="line">    Registry has been <span class="built_in">set</span> to: https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试源速度</p>
<ul>
<li>测试一个源<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nrm <span class="built_in">test</span> npm</span><br></pre></td></tr></table></figure></li>
<li>测试所有源<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nrm <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>访问源的主页</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nrm home taobao</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ps: 此命令会在默认浏览器中打开淘宝源的主页：<a href="https://registry.npm.taobao.org/" target="_blank" rel="noopener">https://registry.npm.taobao.org/</a></p>
</blockquote>
</li>
<li><p>添加/刪除 一个源</p>
<ul>
<li><p>添加源：nrm add <registry> <url> [home]，home参数主要用于访问源的主页（可选）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nrm add gating http://npm.gatings.com/  http://gatings.cn/</span><br></pre></td></tr></table></figure>
</li>
<li><p>刪除源：nrm del <registry></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nrm del gating</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ps: nrm del 命令不能删除nrm自己内置的源。</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<h2 id="实用模块推荐"><a href="#实用模块推荐" class="headerlink" title="实用模块推荐"></a>实用模块推荐</h2><h3 id="anywhere"><a href="#anywhere" class="headerlink" title="anywhere"></a>anywhere</h3><p>朴灵大佬的 <code>anywhere</code>, 随时随地可以创建一个静态服务器，用于查看 <code>vue</code> 或 <code>react</code> 打包后的代码，或者局域网内资源共享</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -g anywhere</span><br><span class="line">anywhere</span><br></pre></td></tr></table></figure>

<h3 id="cloc"><a href="#cloc" class="headerlink" title="cloc"></a>cloc</h3><p>快速统计某文件夹下代码的数据量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -g cloc</span><br><span class="line">cloc --exclude-dir=node_modules . --exclude-ext=json,html <span class="comment"># 排除node_modules,排除json,html文件</span></span><br></pre></td></tr></table></figure>

<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p>这个也不用我多说了吧，目前世界上最先进的分布式版本控制系统，也是最常用的版本控制工具，这里就不过多说明了，鉴于各位同学的网速文本，这里就放一下下载链接，另外，修改<code>git bash</code>主题可以参考我博客的这篇文章:<a href="http://www.gatings.cn/%E8%AE%B0%E5%BD%95/2018/11/01/GitBash%E4%B8%BB%E9%A2%98%E9%A3%8E%E6%A0%BC/" target="_blank" rel="noopener">GitBash主题风格</a></p>
<blockquote>
<p>ps: <a href="https://www.lanzous.com/i8prqgh" target="_blank" rel="noopener">Git蓝奏云链接</a>,<a href="https://git-scm.com/" target="_blank" rel="noopener">Git官网链接，网速快的小伙伴可以在这里下载</a>，同样是无脑下一步安装</p>
</blockquote>
<h1 id="VS-Code"><a href="#VS-Code" class="headerlink" title="VS Code"></a>VS Code</h1><p>个人觉得最适合前端开发的一款编辑器了，没有之一</p>
<h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p>这个就不多介绍了，注意修改下安装路径和添加Code到环境变量即可。</p>
<blockquote>
<p>ps: 添加都环境变量主要是为了在终端输入 <code>code .</code> 或 <code>code xxx</code> 就能直接打开目录或文件。</p>
</blockquote>
<h2 id="编程字体（FiraCode）"><a href="#编程字体（FiraCode）" class="headerlink" title="编程字体（FiraCode）"></a>编程字体（FiraCode）</h2><p><code>Fira Code</code>是<code>Fira Mono</code>字体的扩展，其中包含一组用于常见编程多字符组合的连字。</p>
<p>比如把输入的「!=」直接显示成「≠」或者把「&gt;=」变成「≥」等等，以此来提高代码的可读性。</p>
<p>再比如，..或//，连字允许我们校正间距。下面是官方的对比图</p>
<p><img src="/" alt="FiraCode" class="lazyload" data-src="https://cdn.JsDelivr.net/gh/GATING/blog_imgs//2020-01-17/all_ligatures.png"></p>
<blockquote>
<p>ps: <a href="https://www.lanzous.com/i8prj1a" target="_blank" rel="noopener">FiraCode蓝奏云链接</a>,<a href="https://github.com/tonsky/FiraCode/releases" target="_blank" rel="noopener">FiraCode官方链接</a>,同上，网速慢的就下载蓝奏云的即可</p>
</blockquote>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>熟练使用快捷键是程序员的必备技</p>
<h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><ol>
<li><code>ctrl + p</code> 根据关键字快速打开一个文件</li>
<li><code>ctrl + ,</code> 打开配置项</li>
<li><code>ctrl + d</code> 快速选取多个相同的内容块</li>
<li><code>ctrl + h</code> 选取所有相同的内容块</li>
<li><code>alt + 鼠标左键</code> 选取多个</li>
<li><code>ctrl + g</code> 跳到指定行</li>
<li><code>ctrl + b</code> 切换侧边栏</li>
<li><code>shift + alt + 上下箭头</code> 复制当前行</li>
<li><code>ctrl + shift + k</code> 快速删除行</li>
<li><code>alt + 数字键</code> 快速切换标签（数字键不是小键盘的数字键）</li>
<li><code>shift + alt + f</code> 代码自动格式化</li>
<li><code>ctrl + shift + p</code> 显示所有命令</li>
<li><code>ctrl + tab</code> 切换不同的文件</li>
</ol>
<h3 id="修改左侧边栏快捷键"><a href="#修改左侧边栏快捷键" class="headerlink" title="修改左侧边栏快捷键"></a>修改左侧边栏快捷键</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">(&#123;</span><br><span class="line">  "key": "cmd+1",</span><br><span class="line">  "command": "workbench.view.explorer"</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"key"</span>: <span class="string">"cmd+2"</span>,</span><br><span class="line">  <span class="attr">"command"</span>: <span class="string">"workbench.view.search"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"key"</span>: <span class="string">"cmd+3"</span>,</span><br><span class="line">  <span class="attr">"command"</span>: <span class="string">"workbench.view.scm"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"key"</span>: <span class="string">"cmd+4"</span>,</span><br><span class="line">  <span class="attr">"command"</span>: <span class="string">"workbench.view.debug"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"key"</span>: <span class="string">"cmd+5"</span>,</span><br><span class="line">  <span class="attr">"command"</span>: <span class="string">"workbench.view.extensions"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+6"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"workbench.view.extension.gitlens"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这里主要是针对于和<code>Chrome</code>切换tab栏的快捷键保持一致，方便记忆</p>
<blockquote>
<p>ps: <code>ctrl+6</code> 是因为我安装了 <code>GitLens</code> 这个拓展，可根据自己的需求把最后一个去掉</p>
</blockquote>
<h2 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h2><p>这里介绍一下我常用的插件</p>
<ul>
<li><code>Auto Close Tag</code> 自动闭合 HTML 标签</li>
<li><code>Auto Rename Tag</code>  修改 HTML 标签时,自动修改匹配的标签(虽然有时候有bug)</li>
<li><code>Bracket Pair Colorizer</code> 用不同颜色高亮显示匹配的括号</li>
<li><code>Code Spell checker</code> 单词拼写检查</li>
<li><code>GitLens</code> 显示文件最近的 commit 和作者，显示当前行 commit 信息</li>
<li><code>HTML CSS Support</code> css提示</li>
<li><code>IntelliSense for css class names</code> html中class输入提示</li>
<li><code>JavaScript (ES6) code snippets</code> ES6语法代码段</li>
<li><code>jQuery Code Snippets</code> jQuery语法代码片段</li>
<li><code>npm Intellisense</code> 导入模块时，提示已安装模块名称</li>
<li><code>open in browser</code> 浏览器中查看</li>
<li><code>Path Intellisense</code> 路径完成提示</li>
<li><code>px2rem</code> px转rem，主要是用flexible.js 和响应式做适配使用</li>
<li><code>Settings Sync</code> 同步设置和插件到Gist,还可以分享第三方Gist共他人同步（下载）</li>
<li><code>vetur</code> Vue 语法高亮</li>
<li><code>vscode-icons</code>  文件图标</li>
<li><code>Vue VSCode Snippets</code> vue的代码片段</li>
<li><code>vscode wxml</code>  VS Code 提供 wxml 语法支持及代码片段</li>
<li><code>WakaTime</code> 记录你一天码代码的时间</li>
</ul>
<blockquote>
<p>附上一份vsc插件整理的pdf：<a href="https://www.lanzous.com/i8pua0d" target="_blank" rel="noopener">点我下载</a></p>
</blockquote>
<h2 id="VSCode-设置"><a href="#VSCode-设置" class="headerlink" title="VSCode 设置"></a>VSCode 设置</h2><p>这里附上个人的 <code>VSCode</code> 设置,并且已经加上注释</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 自动保存</span></span><br><span class="line">    <span class="attr">"files.autoSave"</span>: <span class="string">"afterDelay"</span>,</span><br><span class="line">    <span class="attr">"fileheader.Author"</span>: <span class="string">"gating"</span>,</span><br><span class="line">    <span class="attr">"fileheader.LastModifiedBy"</span>: <span class="string">"gating"</span>,</span><br><span class="line">    <span class="comment">// 控制资源管理器是否在把文件删除到废纸篓时进行确认。</span></span><br><span class="line">    <span class="attr">"explorer.confirmDelete"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 启用后，按下 TAB 键，将展开 Emmet 缩写。</span></span><br><span class="line">    <span class="attr">"emmet.triggerExpansionOnTab"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 在默认不支持 Emmet 的语言中启用 Emmet 缩写功能。</span></span><br><span class="line">    <span class="attr">"emmet.includeLanguages"</span>: &#123;</span><br><span class="line">        <span class="attr">"javascript"</span>: <span class="string">"javascriptreact"</span>,</span><br><span class="line">        <span class="attr">"vue-html"</span>: <span class="string">"html"</span>,</span><br><span class="line">        <span class="attr">"vue"</span>: <span class="string">"html"</span>,</span><br><span class="line">        <span class="attr">"wxml"</span>: <span class="string">"html"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 为指定的语法定义配置文件或使用带有特定规则的配置文件。</span></span><br><span class="line">    <span class="attr">"emmet.syntaxProfiles"</span>: &#123;</span><br><span class="line">        <span class="attr">"vue-html"</span>: <span class="string">"html"</span>,</span><br><span class="line">        <span class="attr">"vue"</span>: <span class="string">"html"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 配置语言的文件关联</span></span><br><span class="line">    <span class="attr">"files.associations"</span>: &#123;</span><br><span class="line">        <span class="attr">"*.wxss"</span>: <span class="string">"css"</span>,</span><br><span class="line">        <span class="attr">"*.html"</span>: <span class="string">"html"</span>,</span><br><span class="line">        <span class="attr">"*.wpy"</span>: <span class="string">"vue"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 控制编辑器是否显示控制字符。</span></span><br><span class="line">    <span class="attr">"editor.renderControlCharacters"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 设置vscode默认的终端</span></span><br><span class="line">    <span class="attr">"terminal.integrated.shell.windows"</span>: <span class="string">"C:\\windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"</span>,</span><br><span class="line">    <span class="attr">"px2rem.rootFontSize"</span>: <span class="number">75</span>,</span><br><span class="line">    <span class="attr">"px2rem.isNeedNotes"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 控制在将设置编辑为 json 时，使用拆分 json 编辑器。</span></span><br><span class="line">    <span class="attr">"workbench.settings.useSplitJSON"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 使用 json 文件编辑器。</span></span><br><span class="line">    <span class="attr">"workbench.settings.editor"</span>: <span class="string">"json"</span>,</span><br><span class="line">    <span class="comment">//  当在 VS Code 中重命名或移动文件时，始终自动更新路径。</span></span><br><span class="line">    <span class="attr">"javascript.updateImportsOnFileMove.enabled"</span>: <span class="string">"always"</span>,</span><br><span class="line">    <span class="attr">"vetur.format.defaultFormatter.html"</span>: <span class="string">"prettier"</span>,</span><br><span class="line">    <span class="attr">"html-css-class-completion.includeGlobPattern"</span>: <span class="string">"**/*.&#123;css,html,vue,jsx&#125;"</span>,</span><br><span class="line">    <span class="attr">"vetur.format.options.tabSize"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="comment">// 配置图标主题</span></span><br><span class="line">    <span class="attr">"workbench.iconTheme"</span>: <span class="string">"vscode-icons"</span>,</span><br><span class="line">    <span class="comment">// 配置缩放等级</span></span><br><span class="line">    <span class="attr">"window.zoomLevel"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="comment">// 配置主题</span></span><br><span class="line">    <span class="attr">"workbench.colorTheme"</span>: <span class="string">"Dracula"</span>,</span><br><span class="line">    <span class="comment">// 配置字体</span></span><br><span class="line">    <span class="attr">"editor.fontFamily"</span>: <span class="string">"Fira Code"</span>,</span><br><span class="line">    <span class="comment">// 配置字体连字。</span></span><br><span class="line">    <span class="attr">"editor.fontLigatures"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"sync.gist"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="comment">// 控制是否在搜索中跟踪符号链接。</span></span><br><span class="line">    <span class="attr">"search.followSymlinks"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 控制在资源管理器内拖放移动文件或文件夹时是否进行确认。</span></span><br><span class="line">    <span class="attr">"explorer.confirmDragAndDrop"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 在保存时格式化文件。</span></span><br><span class="line">    <span class="attr">"editor.formatOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 设置路径别名</span></span><br><span class="line">    <span class="attr">"path-intellisense.mappings"</span>: &#123;</span><br><span class="line">        <span class="attr">"@"</span>: <span class="string">"$&#123;workspaceRoot&#125;/src/"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果觉得复制麻烦，并且也不想一个个安装插件，可以同步我的<code>Gist ID</code>，直接使用我的配置即可。。。ID：<code>9d1c53501e76056a81fb1e2c9a6f181b</code></p>
</blockquote>
<h3 id="同步设置"><a href="#同步设置" class="headerlink" title="同步设置"></a>同步设置</h3><ol>
<li><p>快捷键<code>ctrl + shift + p</code>,输入Sync，选择高级选项</p>
</li>
<li><p>选中打开设置</p>
</li>
<li><p>复制<code>9d1c53501e76056a81fb1e2c9a6f181b</code>到<code>Gist ID</code>栏，选择自动下载即可</p>
</li>
</ol>
<h1 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h1><p>使用人数最多，最强大的浏览器，也是前端开发必备的浏览器，丰富的拓展，搭配谷歌的同步功能，可以说一个账号走天下</p>
<h2 id="快捷键-1"><a href="#快捷键-1" class="headerlink" title="快捷键"></a>快捷键</h2><p>还是那句话,熟练使用快捷键是程序员的必备技…下面还是介绍我常用的快捷键</p>
<ul>
<li><code>ctrl + j</code> 新标签页中打开”下载内容”页</li>
<li><code>ctrl + h</code> 新标签页中打开”历史记录”页</li>
<li><code>ctrl + n</code> 打开新窗口</li>
<li><code>ctrl + t</code> 打开一个新的Tab</li>
<li><code>ctrl + u</code> 查看页面源代码</li>
<li><code>ctrl + w</code> 关闭当前窗口</li>
<li><code>ctrl + 数字键</code> 快速跳转到和数字键对应的Tab，ctrl+9为最后一个</li>
<li><code>ctrl + shift + n</code> 以无痕模式打开新窗口（可用于多个窗口的cookie不共享，便于调试）</li>
<li><code>ctrl + tab</code> 切换不同的tab页</li>
<li><code>ctrl + g</code> 查找栏中搜索字词相匹配的下一条内容</li>
<li><code>ctrl + shift + g</code> 查找栏中搜索字词相匹配的上一条内容</li>
<li><code>shift + esc</code> 任务管理器</li>
</ul>
<h2 id="拓展插件"><a href="#拓展插件" class="headerlink" title="拓展插件"></a>拓展插件</h2><ul>
<li><code>AdBlockPlus</code> 屏蔽烦人的广告（必装插件）</li>
<li><code>Charset</code> 修改当前页面的编码，因谷歌升级了 55 以上之后，精简编码功能</li>
<li><code>CSS Used</code> 用来获取某个元素渲染后的styles（样式），即computed后的样式，扒代码小能手</li>
<li><code>JSON-handle</code> 格式化JSON文件,访问JSON文件（数据）时获得更愉悦的体验</li>
<li><code>SwitchyOmega</code> 管理和切换多个代理设置（小飞机必备插件）,具体怎么使用还是百度下吧，这里就不教学了</li>
<li><code>Tampermonkey</code> 有猴子插件，用于管理用户自定义的脚本（必装插件）</li>
<li><code>React Developer Tools</code> 开发React应用时必装的一款拓展</li>
<li><code>Vue.js devtools</code> 同上，都是辅助开发的拓展</li>
<li><code>Wappalyzer</code> 当前网站所使用技术栈(图个新鲜，挺有意思的)</li>
</ul>
<blockquote>
<p>ps: 油猴子脚本下载：<a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">https://greasyfork.org/zh-CN</a></p>
</blockquote>
<h1 id="Postman"><a href="#Postman" class="headerlink" title="Postman"></a>Postman</h1><p>作为前端，最常打交道的就是后端了，所以我们需要一个调试<code>API</code>的工具，而<code>Postman</code>就是一款非常优秀的API接口调试工具。</p>
<blockquote>
<p>ps: 如果还没用过 <code>Postman</code> 的，赶紧下载下来体验吧</p>
</blockquote>
<h2 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h2><p>1.众所周知，Postman最早是chrome浏览器的插件，所以你可以通过Chrome商店搜索下载即可。</p>
<p>2.Postman提供了独立的安装包，不再依赖于Chrome浏览器了，所以也可通过安装包直接安装。</p>
<blockquote>
<p>ps：众所周知的原因，2018年初Chrome停止对Chrome应用程序的支持。所以这里建议使用独立安装包下载</p>
</blockquote>
<p>下载也是直接安装即可，这里同样提供下载链接</p>
<blockquote>
<p><a href="https://www.lanzous.com/i8prqgh" target="_blank" rel="noopener">Postman蓝奏云链接</a>,<a href="https://www.getpostman.com/downloads/" target="_blank" rel="noopener">Postman官网链接，网速快的小伙伴可以在这里下载</a></p>
</blockquote>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><h3 id="配置多个环境"><a href="#配置多个环境" class="headerlink" title="配置多个环境"></a>配置多个环境</h3><p>一般正式的开发项目都会有<code>测试环境</code>和<code>线上环境</code>之分，而前端同学拿到这两个地址后，每次都要请求不同的环境都要去修改主机名，造成不必要的时间浪费，而<code>Postman</code>就提供了多个环境的选择，方便我们无缝链接不同环境的接口</p>
<p>1.设置环境变量</p>
<p>点击右上角设置图标</p>
<p><img src="/" alt="设置环境变量" class="lazyload" data-src="https://cdn.JsDelivr.net/gh/GATING/blog_imgs//2020-01-17/postman01.jpg"></p>
<p>添加环境变量</p>
<p><img src="/" alt="设置环境变量" class="lazyload" data-src="https://cdn.JsDelivr.net/gh/GATING/blog_imgs//2020-01-17/postman02.jpg"></p>
<p>添加key/value值，不同环境的key值需一致</p>
<p><img src="/" alt="设置环境变量" class="lazyload" data-src="https://cdn.JsDelivr.net/gh/GATING/blog_imgs//2020-01-17/postman03.jpg"><br><img src="/" alt="设置环境变量" class="lazyload" data-src="https://cdn.JsDelivr.net/gh/GATING/blog_imgs//2020-01-17/postman04.jpg"></p>
<p>2.设置对应的key值</p>
<p><img src="/" alt="设置环境变量" class="lazyload" data-src="https://cdn.JsDelivr.net/gh/GATING/blog_imgs//2020-01-17/postman05.png"></p>
<h3 id="配置重复header"><a href="#配置重复header" class="headerlink" title="配置重复header"></a>配置重复header</h3><p>很多时候，当后端写完一个新接口时，我们每次测试请求，<code>header</code>头很有可能是一样的，比如说，每个接口都需要<code>token</code>，这时候就需要<code>Postman</code>来帮我们设置<code>header</code>头的变量，避免复制重复的<code>header</code>头，做无用功</p>
<p>1.设置headers</p>
<p><img src="/" alt="" class="lazyload" data-src="https://cdn.JsDelivr.net/gh/GATING/blog_imgs//2020-01-17/postman06.jpg"></p>
<p><img src="/" alt="" class="lazyload" data-src="https://cdn.JsDelivr.net/gh/GATING/blog_imgs//2020-01-17/postman07.jpg"></p>
<p>2.使用headers</p>
<p><img src="/" alt="" class="lazyload" data-src="https://cdn.JsDelivr.net/gh/GATING/blog_imgs//2020-01-17/postman08.jpg"></p>
<p>好了，到这里，基础的使用已经回了，当然，这不是<code>Postman</code>的全部功能，它还可以做单元测试、回归测试、自动化测试等等，这就需要你们自己去体验一番了。。。</p>
<blockquote>
<p>ps: <code>Postman</code>还有个兄弟款<a href="https://github.com/liyasthomas/postwoman" target="_blank" rel="noopener">Postwoman</a>，开源免费，也很不错</p>
</blockquote>
<h1 id="前端开发小提示"><a href="#前端开发小提示" class="headerlink" title="前端开发小提示"></a>前端开发小提示</h1><h2 id="使用Map代替if-else"><a href="#使用Map代替if-else" class="headerlink" title="使用Map代替if/else"></a>使用Map代替if/else</h2><p>开发的时候，经常会用到判断，然后根据判断返回不同的值或方法,这里以微信开发为例,微信接受用户消息时会有 <code>image</code>、<code>text</code>、<code>voice</code>等等EventKey,这时候我们就需要根据这几个Key写不同的方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleEvent</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(key === <span class="string">'image'</span>)&#123;</span><br><span class="line">        <span class="comment">// 处理用户发送图片的方法</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key === <span class="string">'text'</span>)&#123;</span><br><span class="line">        <span class="comment">// 处理用户发送文本的方法</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key === <span class="string">'voice'</span>)&#123;</span><br><span class="line">        <span class="comment">// 处理用户发送声音</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 处理其他事件</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们观察上面代码，随着我们业务的增加，可能会获取用户的地理位置、扫码什么的，这个if/else就会越来越多，代码就会变得越来臃肿，可读性也越来越差。。。接下来我们就通过Map来优化下我们的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map = &#123;</span><br><span class="line">    <span class="string">`image`</span>:<span class="function"><span class="params">message</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 处理用户发送图片的方法</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">`text`</span>:<span class="function"><span class="params">message</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 处理用户发送文本的方法</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">`voice`</span>:<span class="function"><span class="params">message</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 处理用户发送声音</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">`default`</span>:&#123;</span><br><span class="line">        <span class="comment">// 处理其他事件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleEvent</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">    key = map.hasOwnProperty(key) ? key : <span class="string">'default'</span></span><br><span class="line">    <span class="keyword">return</span> map[key]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ps: 推荐观看 <a href="https://juejin.im/post/5bdfef86e51d453bf8051bf8" target="_blank" rel="noopener">JavaScript 复杂判断的更优雅写法</a></p>
</blockquote>
<h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p><code>Chrome DevTools</code>（控制台），我想各位前端小伙伴应该不陌生吧，经常用它来调试页面，<code>element</code>、<code>console</code>和<code>network</code>都是要天天打交道的，不过你可知道他还有个可以测试当前页面性能的面板?没错，他就是 <code>Audits</code> 面板。。。</p>
<p>chrome 60之后，他引入了Google自家开源的一个项目：<code>LightHouse</code>。</p>
<blockquote>
<p>LightHouse 是Google开源的一个自动化测试工具，之前是以 chrome 插件 和 命令行cli的方式使用，现在可以直接通过开发者面板使用了，所以不推荐在单独安装插件或者cli工具。。。</p>
</blockquote>
<p>这里以测试百度为例：</p>
<p>1.首先打开<a href="https://www.baidu.com/" target="_blank" rel="noopener">百度</a>,然后打开控制面板，点击右边的双箭头</p>
<p><img src="/" alt="Chrome DevTools控制台" class="lazyload" data-src="https://cdn.JsDelivr.net/gh/GATING/blog_imgs//2020-01-17/Audits01.jpg"></p>
<p>2.选中 <code>Audits</code> 面板</p>
<p><img src="/" alt="Audits面板" class="lazyload" data-src="https://cdn.JsDelivr.net/gh/GATING/blog_imgs//2020-01-17/Audits02.jpg"></p>
<p>3.选择桌面设备（就是测试pc版），然后点击<code>run audits</code>，之后就会根据这几项指标生产一份报告，如下图</p>
<p><img src="/" alt="测试" class="lazyload" data-src="https://cdn.JsDelivr.net/gh/GATING/blog_imgs//2020-01-17/Audits03.jpg"></p>
<p>4.通过点击右侧菜单可以保存整个测试报告</p>
<p><img src="/" alt="保存" class="lazyload" data-src="https://cdn.JsDelivr.net/gh/GATING/blog_imgs//2020-01-17/Audits04.jpg"></p>
<blockquote>
<ul>
<li>同时也有个中文版的线上版本 <a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="noopener">https://developers.google.com/speed/pagespeed/insights/</a></li>
<li>移动端兼容性测试：<a href="https://search.google.com/test/mobile-friendly" target="_blank" rel="noopener">https://search.google.com/test/mobile-friendly</a></li>
<li>结构化网页数据：<a href="https://search.google.com/structured-data/testing-tool/#" target="_blank" rel="noopener">https://search.google.com/structured-data/testing-tool/#</a></li>
<li>(貌似都需要科学上网才可以访问…)</li>
</ul>
</blockquote>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>至此，本次搭建也已经全部结束了，希望你能从文中收所获，也能搭建属于自己适合自己的开发环境</p>
<p>最后，感谢各位观众老爷观看啦O(∩_∩)O</p>
]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode的个人配置</title>
    <url>/2020/02/10/vscode%E4%B8%AA%E4%BA%BA%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>此篇只是为了记录自己vscode的设置，防止以后配置丢失，无实际意义</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"files.autoSave"</span>: <span class="string">"afterDelay"</span>,</span><br><span class="line">    <span class="attr">"editor.formatOnPaste"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"editor.formatOnType"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"editor.formatOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"fileheader.Author"</span>: <span class="string">"codercqw"</span>,</span><br><span class="line">    <span class="attr">"fileheader.LastModifiedBy"</span>: <span class="string">"codercqw"</span>,</span><br><span class="line">    <span class="attr">"explorer.confirmDelete"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"vetur.validation.template"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"git.enableSmartCommit"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"emmet.triggerExpansionOnTab"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"emmet.includeLanguages"</span>: &#123;</span><br><span class="line">        <span class="attr">"vue-html"</span>: <span class="string">"html"</span>,</span><br><span class="line">        <span class="attr">"vue"</span>: <span class="string">"html"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"workbench.activityBar.visible"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"files.associations"</span>: &#123;</span><br><span class="line">        <span class="attr">"*.wxss"</span>: <span class="string">"css"</span>,</span><br><span class="line">        <span class="attr">"*.html"</span>: <span class="string">"html"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"window.menuBarVisibility"</span>: <span class="string">"default"</span>,</span><br><span class="line">    <span class="attr">"window.zoomLevel"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"editor.minimap.enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"python.linting.flake8Enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"python.formatting.provider"</span>: <span class="string">"yapf"</span>,</span><br><span class="line">    <span class="attr">"guides.enabled"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"editor.renderWhitespace"</span>: <span class="string">"none"</span>,</span><br><span class="line">    <span class="attr">"editor.renderControlCharacters"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"git.autofetch"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"workbench.statusBar.visible"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"terminal.integrated.shell.windows"</span>: <span class="string">"C:\\windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"</span>,</span><br><span class="line">    <span class="attr">"git.confirmSync"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"px2rem.rootFontSize"</span>: <span class="number">75</span>,</span><br><span class="line">    <span class="attr">"px2rem.isNeedNotes"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"workbench.settings.useSplitJSON"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"workbench.settings.editor"</span>: <span class="string">"json"</span>,</span><br><span class="line">    <span class="attr">"javascript.updateImportsOnFileMove.enabled"</span>: <span class="string">"always"</span>,</span><br><span class="line">    <span class="attr">"sync.gist"</span>: <span class="string">"023ae35a68a66e3b5e122045f4c94d0e"</span>,</span><br><span class="line">    <span class="attr">"vetur.format.defaultFormatter.html"</span>: <span class="string">"prettier"</span>,</span><br><span class="line">    <span class="attr">"workbench.colorTheme"</span>: <span class="string">"Dracula"</span>,</span><br><span class="line">    <span class="attr">"html-css-class-completion.includeGlobPattern"</span>: <span class="string">"**/*.&#123;css,html,vue,jsx&#125;"</span>,</span><br><span class="line">    <span class="attr">"vetur.format.options.tabSize"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">"[jsonc]"</span>: &#123;</span><br><span class="line">        <span class="attr">"editor.defaultFormatter"</span>: <span class="string">"HookyQR.beautify"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"workbench.iconTheme"</span>: <span class="string">"vscode-icons"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编辑器</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
</search>
